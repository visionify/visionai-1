{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"VisionAI","text":"<p>Documentation for VisionAI toolkit.</p>"},{"location":"#overview","title":"Overview","text":"<p>VisionAI provides a set of command line utilities for you to manage different Vision AI scenarios that have been pre-developed and pre-tested. VisionAI focuses on workplace health and safety models - and majority of the models you see here have been developed with that in mind.</p> <p>These are production-ready model trained from open-source and academic datasets. We are continuously working on new scenarios - and our current scenario repo consists of over 60 scenarios that are listed here. They are developed with the intent of being easy-to-use for business. The framework also supports a whole bunch of custom scenarios.</p>"},{"location":"#install-visionai","title":"Install VisionAI","text":"<p>Install VisionAI application through <code>PyPI</code>. There are other options available for install - including a Docker container option. These are detailed in installation section.</p> <pre><code>$ pip install visionai\n\n---&gt; 100%\n\nSuccessfully installed visionai\n\n\u2728 You are all set to use visionai toolkit \u2728\n</code></pre>"},{"location":"#deploy-to-azure","title":"Deploy to Azure","text":"<p>Deploy a fully configured and tested solution directly from Azure Marketplace. VisionAI runs computer vision models, most of which run orders of magnitude faster if executed on a GPU machine. Our Azure Marketplace offer VisionAI Community Edition is available through Azure Marketplace here (TODO). The community edition deploys a fully configured Virtual Machine with the recommended hardware and software options. Get more details here.</p> <p></p> <ul> <li>TODO: Point to ARM template that needs to be deployed (using these instructions and here is an example JSON file).</li> </ul>"},{"location":"#list-available-scenarios","title":"List available Scenarios","text":"<p>VisionAI is organized in terms of scenarios. Consider each scenario as being a business use-case, that is solved by a combination of Machine Learning models and an inference algorithm. For example Warn me when max occupancy of this area exceeds 80 people is a business scenario, where as the People detection is an ML model.</p> <p>VisionAI supports 60 scenarios currently and more are being added continuously. Our current focus is on Workplace Safety scenarios. Please contact us if a scenario you need is not present in our repo and we will look into it.</p> <pre><code>$ visionai scenarios list\n\n------------------------------------------------\nPrivacy Suite\nblur-faces\nblur-text\n\nFire safety\nearly-smoke-and-fire-detection\nsmoking-and-vaping-detection\n\nPersonnel safety\nppe-detection\npfas-system-detection\nrailings-detection\n\nSuspicious activity\nshipping-activity-detection\nagressive-behaivior\n\n\nCompliance Policies\nmax-occupancy\n\nEquipment\nrust-and-corrosion-detection\n\nIR Camera\ntemperature-monitoring\n------------------------------------------------\n\n\u2728 More scenarios are added regularly \u2728\n</code></pre>"},{"location":"#get-details-for-a-scenario","title":"Get details for a Scenario","text":"<p>You can get details about a scenario using <code>visionai scenario details</code> command. Specify the scenario you want additional details for. The details of a scenario include the dataset size, model accuracy metrics,</p> <pre><code>$ visionai scenario --name early-smoke-and-fire-detection details\n\n------------------------------------------------\nCategory: Fire safety\nScenario: early-smoke-and-fire-detection\nThis scenario has been trained on open-source datasets consisting of 126,293 images. The datasets images are primarily outdoors (70%), but do contain a good number of indoor images (30%). There is a ~50-50% mix of day vs night images. You can find more details about this scenario at visionify.ai/early-smoke-and-fire-detection.\n\n\nModel: smoke-and-fire-detection-1.0.1.pt\nModel size: 127MB\nModel type: Object Detection\nFramework: PyTorch\n\nModel performance:\nDataset size: 126,293 images\nAccuracy: 94.1%\nRecall: 93%\nF1-Score: 93.5%\n\nEvents:\nsmoke-detected  | Immediate\nfire-detected   | Immediate\n\nEvent examples:\n{\n    \"scenario\": \"smoke-and-fire-detection\",\n    \"event_name\": \"smoke-detected\",\n    \"event_details\": {\n        \"camera\": \"camera-01\",\n        \"date\": \"2023-01-04 11:05:02\",\n        \"confidence\": 0.92\n    }\n}\n------------------------------------------------\n</code></pre>"},{"location":"#run-a-scenario","title":"Run a Scenario","text":"<p>Use <code>visionai run</code> command to run a scenario. In its simplest sense, you can run a single scenario on your web-cam. In a more complex use-case, you can specify a pipeline of scenarios, configure notification logic for each scenario, timings for each scenario etc.</p> <pre><code>$ visionai run --scenario early-smoke-and-fire-detection --camera OFFICE-01\n\nStarting early-smoke-and-fire-detection\n...\n</code></pre>"},{"location":"#get-help-on-commands","title":"Get help on commands","text":"<p>You can get more help on any command by adding --help at the end of the command. For example, if you want to get details about pipeline commands, you can run the following commands.</p> <pre><code>$ visionai pipeline --help\n\n Usage: visionai pipeline [OPTIONS] COMMAND [ARGS]...\n\n Manage pipelines\n Pipeline is a sequence of preprocess routines and\n scenarios to be run on a given set of cameras. Each\n pipeline can be configured to run specific scenarios -\n each scenario with their own customizations for event\n notifications. This module provides robust methods for\n managing pipelines, showing their details, adding/remove\n cameras from pipelines and running a pipeline.\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 add-camera      Add a camera to a pipeline               \u2502\n\u2502 add-preprocess  Add a preprocess routine to a pipeline   \u2502\n\u2502 add-scenario    Add a scenario to a pipeline             \u2502\n\u2502 create          Create a named pipeline                  \u2502\n\u2502 remove-camera   Remove a camera from a pipeline          \u2502\n\u2502 reset           Reset the pipeline to original state.    \u2502\n\u2502 run             Run a pipeline of scenarios on given     \u2502\n\u2502                 cameras                                  \u2502\n\u2502 show            Show details of a pipeline               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"#next-steps","title":"Next steps","text":"<p>Congratulations! You have successfully run the first scenario. Now go through Tutorials to learn about how to run multiple scnearios, how to configure each scenario for the events you need, how to set up the dependencies etc.</p> <p>Or you can also go through our scenarios page to explore the different scenarios available and their model details. If you have a need for a scenario to be implemented, do not hesitate to submit a request. For consulting projects and custom licenses - find the details here</p>"},{"location":"todo/","title":"Todo","text":"<ul> <li>Figure out how to integrate API/web-app into same codebase. (or through Docker somehow).</li> <li>Move edgeApi to fastapi, enable documentation.</li> <li>Move edge-inference scripts here.</li> <li>Add inference dependencies to the package.</li> <li>Support for pipelines: TODO</li> <li>Add support for docsqa.jina.ai after documentation is complete. This would provide an automated bot for the end-user.</li> <li>Work through these items for the PyPi package improvement (link): <pre><code>Basic info present?         0\nSource repository present?  0\nReadme present?             0\nLicense present?            1\nHas multiple versions?      1\nFollows SemVer?             1\nRecent release?             1\nNot brand new?              0\n1.0.0 or greater?           0\nDependent Packages          0\nDependent Repositories      0\nStars                       0\nContributors                0\nLibraries.io subscribers    0\n</code></pre></li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#visionai-changelog","title":"VisionAI Changelog","text":""},{"location":"changelog/#0117-february-9-2023","title":"0.1.17 February 9, 2023","text":"<ul> <li>\ud83d\udccc Added support for <code>visionai web start|stop|status</code> commands with API server support.</li> <li>Ensure We can pull visionify/visionai-api to local machine</li> <li>Run this as a container with model-repo/ and config/ folder shared.</li> <li>Ensure back-to-back stop/start would work.</li> <li>Ensure we can just do <code>web start</code> without doing <code>web install</code></li> <li>Removed <code>web install</code> as it can cause confusion</li> </ul>"},{"location":"changelog/#0116-february-8-2023","title":"0.1.16 February 8, 2023","text":"<ul> <li>\u2728 Support for <code>visionai web start|stop|status</code> commands.</li> <li>\ud83c\udfa8 Pull latest images from dockerhub before starting web server.</li> <li>\ud83d\ude9a Support for alias for all commands (like <code>visionai camera add</code> and <code>visionai cameras add</code>)</li> <li>\ud83d\udd25 Add support for <code>face-blur</code> scenario. You can test it with <code>visionai scenario test face-blur</code> now.</li> <li>\ud83d\udcdd Tested support for Ubuntu (with NVIDIA graphics card), MacOS, and Windows 10.</li> </ul>"},{"location":"changelog/#0115-february-7-2023","title":"0.1.15 February 7, 2023","text":"<ul> <li>\ud83d\udc1b On linux we were using incorrect nvidia_smi package.</li> <li>\ud83c\udfa8 Add support for common spelling errors during commands (like scenarios instead of scenario)</li> <li>\ud83d\ude9a Move scenario.json file to this repo - so everything is in one place.</li> </ul>"},{"location":"changelog/#0114-february-3-2023","title":"0.1.14 February 3, 2023","text":"<ul> <li>\u2728 Support for <code>visionai scenario test</code> command.</li> <li>\u2728 Support for Triton server running on MacOS (tested)</li> <li>\ud83d\udd25 Simplified scenario command names (don't have to specify --name anymore)</li> <li>\ud83d\udcdd Renamed all cli files to _app - to avoid confusion between models.py &amp; models/ module.</li> <li>\ud83d\udcdd Move add-scenario and remove-scenario to camera module (these are camera operations.)</li> <li>\ud83d\udd25 Show nice progress bar while any docker image is being pulled.</li> <li>\ud83e\uddea Added results.show() method to detection that uses cv2.imshow() to show the results locally.</li> </ul>"},{"location":"changelog/#0112-january-31-2023","title":"0.1.12 January 31, 2023","text":"<ul> <li>\u2728 Support for managing triton server</li> <li>\ud83c\udfa8 Start/stop triton server from CLI.</li> <li>\ud83d\udcdd Get/print models status coming from triton.</li> <li>\ud83d\udd25 Implemented pretty printing through rich library for models</li> <li>\ud83e\uddea CI Tests to test both before &amp; after package creation</li> <li>\ud83d\udc1b Fix versioning bug (that broke the previous version)</li> </ul>"},{"location":"changelog/#0111-january-27-2023","title":"0.1.11 January 27, 2023","text":"<ul> <li>Support for Triton models (through http/grpc)</li> <li>Implemented yolov5 backend for triton</li> <li>Implemented Autoshape wrapper for NMS &amp; scaling</li> <li>Added easy test case for reproducing.</li> <li>Updated schema for models, fix test cases for it.</li> </ul>"},{"location":"changelog/#0110-january-25-2023","title":"0.1.10 January 25, 2023","text":"<ul> <li>Implemented download models for scenarios</li> <li>Added cv2, torch, numpy dependencies for inference</li> <li>Added support for <code>--version</code> &amp; <code>--verbose</code> options to cli</li> <li>CLI Test cases to use <code>python -m visionai</code> to replicate user behavior</li> </ul>"},{"location":"changelog/#017-january-24-2023","title":"0.1.7 January 24, 2023","text":"<ul> <li>Implemented scenarios functionality</li> <li>Docker compose integration</li> <li>Makefile integration</li> </ul>"},{"location":"changelog/#017-january-22-2023","title":"0.1.7 January 22, 2023","text":"<ul> <li>Implemented camera add/delete functionality</li> </ul>"},{"location":"changelog/#016-january-20-2023","title":"0.1.6 January 20, 2023","text":"<ul> <li>Implemented initial set of commands in different files (dummy implementation)</li> <li>Testing commands individually or through the main application</li> </ul>"},{"location":"changelog/#013-january-16-2023","title":"0.1.3 January 16, 2023","text":"<ul> <li>Basic overview and usage documentation is updated.</li> <li>Started using a termy JS script to show terminal animations nicely</li> </ul>"},{"location":"changelog/#012-january-14-20123","title":"0.1.2 January 14, 20123","text":"<ul> <li>Made MkDocs documents based on Typer format</li> <li>Registered CNAME to point to https://docs.visionify.ai</li> </ul>"},{"location":"changelog/#011-january-11-2023","title":"0.1.1 January 11, 2023","text":"<ul> <li>Updated Azure DevOps CI/CD to automatically publish package on each merge</li> <li>Initial set of commands for visionai application</li> <li>Made <code>visionai</code> as a callable CLI application through poetry</li> </ul>"},{"location":"changelog/#010-january-10-2023","title":"0.1.0 January 10, 2023","text":"<ul> <li>Initial release: <code>pip install visionai</code></li> <li>Pushed package to <code>PyPI</code> repository</li> </ul>"},{"location":"company/about/","title":"VisionAI","text":"<p>Documentation for VisionAI toolkit.</p>"},{"location":"company/about/#overview","title":"Overview","text":"<p>VisionAI provides a set of command line utilities for you to manage different Vision AI scenarios that have been pre-developed and pre-tested. VisionAI focuses on workplace health and safety models - and majority of the models you see here have been developed with that in mind.</p> <p>These are production-ready model trained from open-source and academic datasets. We are continuously working on new scenarios - and our current scenario repo consists of over 60 scenarios that are listed here. They are developed with the intent of being easy-to-use for business. The framework also supports a whole bunch of custom scenarios.</p>"},{"location":"company/about/#install-visionai","title":"Install VisionAI","text":"<p>Install VisionAI application through <code>PyPI</code>. There are other options available for install - including a Docker container option. These are detailed in installation section.</p> <pre><code>$ pip install visionai\n---&gt; 100%\n\nSuccessfully installed visionai\n\n\u2728 You are all set to use visionai toolkit \u2728\n</code></pre>"},{"location":"company/about/#deploy-to-azure","title":"Deploy to Azure","text":"<p>Deploy a fully configured and tested solution directly from Azure Marketplace. VisionAI runs computer vision models, most of which run orders of magnitude faster if executed on a GPU machine. Our Azure Marketplace offer VisionAI Community Edition is available through Azure Marketplace here (TODO). The community edition deploys a fully configured Virtual Machine with the recommended hardware and software options. Get more details here.</p> <p></p> <ul> <li>TODO: Point to ARM template that needs to be deployed (using these instructions and here is an example JSON file).</li> </ul>"},{"location":"company/about/#list-available-scenarios","title":"List available Scenarios","text":"<p>VisionAI is organized in terms of scenarios. Consider each scenario as being a business use-case, that is solved by a combination of Machine Learning models and an inference algorithm. For example Warn me when max occupancy of this area exceeds 80 people is a business scenario, where as the People detection is an ML model.</p> <p>VisionAI supports 60 scenarios currently and more are being added continuously. Our current focus is on Workplace Safety scenarios. Please contact us if a scenario you need is not present in our repo and we will look into it.</p> <pre><code>$ visionai scenarios list\n\n------------------------------------------------\nPrivacy Suite\nblur-faces\nblur-text\n\nFire safety\nearly-smoke-and-fire-detection\nsmoking-and-vaping-detection\n\nPersonnel safety\nppe-detection\npfas-system-detection\nrailings-detection\n\nSuspicious activity\nshipping-activity-detection\nagressive-behaivior\n\n\nCompliance Policies\nmax-occupancy\n\nEquipment\nrust-and-corrosion-detection\n\nIR Camera\ntemperature-monitoring\n------------------------------------------------\n\n\u2728 More scenarios are added regularly \u2728\n</code></pre>"},{"location":"company/about/#get-details-for-a-scenario","title":"Get details for a Scenario","text":"<p>You can get details about a scenario using <code>visionai scenario details</code> command. Specify the scenario you want additional details for. The details of a scenario include the dataset size, model accuracy metrics,</p> <pre><code>$ visionai scenario --name early-smoke-and-fire-detection details\n\n------------------------------------------------\nCategory: Fire safety\nScenario: early-smoke-and-fire-detection\nThis scenario has been trained on open-source datasets consisting of 126,293 images. The datasets images are primarily outdoors (70%), but do contain a good number of indoor images (30%). There is a ~50-50% mix of day vs night images. You can find more details about this scenario at visionify.ai/early-smoke-and-fire-detection.\n\n\nModel: smoke-and-fire-detection-1.0.1.pt\nModel size: 127MB\nModel type: Object Detection\nFramework: PyTorch\n\nModel performance:\nDataset size: 126,293 images\nAccuracy: 94.1%\nRecall: 93%\nF1-Score: 93.5%\n\nEvents:\nsmoke-detected  | Immediate\nfire-detected   | Immediate\n\nEvent examples:\n{\n    \"scenario\": \"smoke-and-fire-detection\",\n    \"event_name\": \"smoke-detected\",\n    \"event_details\": {\n        \"camera\": \"camera-01\",\n        \"date\": \"2023-01-04 11:05:02\",\n        \"confidence\": 0.92\n    }\n}\n------------------------------------------------\n</code></pre>"},{"location":"company/about/#run-a-scenario","title":"Run a Scenario","text":"<p>Use <code>visionai run</code> command to run a scenario. In its simplest sense, you can run a single scenario on your web-cam. In a more complex use-case, you can specify a pipeline of scenarios, configure notification logic for each scenario, timings for each scenario etc.</p> <pre><code>$ visionai run --scenario early-smoke-and-fire-detection --camera OFFICE-01\n\nStarting early-smoke-and-fire-detection\n...\n</code></pre>"},{"location":"company/about/#get-help-on-commands","title":"Get help on commands","text":"<p>You can get more help on any command by adding --help at the end of the command. For example, if you want to get details about pipeline commands, you can run the following commands.</p> <pre><code>$ visionai pipeline --help\n\n Usage: visionai pipeline [OPTIONS] COMMAND [ARGS]...\n\n Manage pipelines\n Pipeline is a sequence of preprocess routines and\n scenarios to be run on a given set of cameras. Each\n pipeline can be configured to run specific scenarios -\n each scenario with their own customizations for event\n notifications. This module provides robust methods for\n managing pipelines, showing their details, adding/remove\n cameras from pipelines and running a pipeline.\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 add-camera      Add a camera to a pipeline               \u2502\n\u2502 add-preprocess  Add a preprocess routine to a pipeline   \u2502\n\u2502 add-scenario    Add a scenario to a pipeline             \u2502\n\u2502 create          Create a named pipeline                  \u2502\n\u2502 remove-camera   Remove a camera from a pipeline          \u2502\n\u2502 reset           Reset the pipeline to original state.    \u2502\n\u2502 run             Run a pipeline of scenarios on given     \u2502\n\u2502                 cameras                                  \u2502\n\u2502 show            Show details of a pipeline               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n$ visionai pipeline add-scenario --help\n\n Usage: visionai pipeline add-scenario [OPTIONS]\n\n Add a scenario to a pipeline\n The order of the scenarios does not matter. All added\n scenarios are run in different threads. All scenarios are\n run after pre-processing stage is done.\n ``` Ex: visionai pipeline --name test_pipe add-scenario\n --name smoke-and-fire visionai pipeline --name test_pipe\n add-scenario --name ppe-detection visionai pipeline --name\n test_pipe run ```\n @arg pipeline - specify a named pipeline @arg scenario -\n specify name of the scenario to run\n @return None\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *  --pipeline        TEXT  pipeline name [default: None] \u2502\n\u2502                            [required]                    \u2502\n\u2502 *  --scenario        TEXT  scenario to add               \u2502\n\u2502                            [default: None]               \u2502\n\u2502                            [required]                    \u2502\n\u2502    --help                  Show this message and exit.   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"company/about/#next-steps","title":"Next steps","text":"<p>Congratulations! You have successfully run the first scenario. Now go through Tutorials to learn about how to run multiple scnearios, how to configure each scenario for the events you need, how to set up the dependencies etc.</p> <p>Or you can also go through our scenarios page to explore the different scenarios available and their model details. If you have a need for a scenario to be implemented, do not hesitate to submit a request.</p>"},{"location":"company/careers/","title":"VisionAI","text":"<p>Documentation for VisionAI toolkit.</p>"},{"location":"company/careers/#overview","title":"Overview","text":"<p>VisionAI provides a set of command line utilities for you to manage different Vision AI scenarios that have been pre-developed and pre-tested. VisionAI focuses on workplace health and safety models - and majority of the models you see here have been developed with that in mind.</p> <p>These are production-ready model trained from open-source and academic datasets. We are continuously working on new scenarios - and our current scenario repo consists of over 60 scenarios that are listed here. They are developed with the intent of being easy-to-use for business. The framework also supports a whole bunch of custom scenarios.</p>"},{"location":"company/careers/#install-visionai","title":"Install VisionAI","text":"<p>Install VisionAI application through <code>PyPI</code>. There are other options available for install - including a Docker container option. These are detailed in installation section.</p> <pre><code>$ pip install visionai\n---&gt; 100%\n\nSuccessfully installed visionai\n\n\u2728 You are all set to use visionai toolkit \u2728\n</code></pre>"},{"location":"company/careers/#deploy-to-azure","title":"Deploy to Azure","text":"<p>Deploy a fully configured and tested solution directly from Azure Marketplace. VisionAI runs computer vision models, most of which run orders of magnitude faster if executed on a GPU machine. Our Azure Marketplace offer VisionAI Community Edition is available through Azure Marketplace here (TODO). The community edition deploys a fully configured Virtual Machine with the recommended hardware and software options. Get more details here.</p> <p></p> <ul> <li>TODO: Point to ARM template that needs to be deployed (using these instructions and here is an example JSON file).</li> </ul>"},{"location":"company/careers/#list-available-scenarios","title":"List available Scenarios","text":"<p>VisionAI is organized in terms of scenarios. Consider each scenario as being a business use-case, that is solved by a combination of Machine Learning models and an inference algorithm. For example Warn me when max occupancy of this area exceeds 80 people is a business scenario, where as the People detection is an ML model.</p> <p>VisionAI supports 60 scenarios currently and more are being added continuously. Our current focus is on Workplace Safety scenarios. Please contact us if a scenario you need is not present in our repo and we will look into it.</p> <pre><code>$ visionai scenarios list\n\n------------------------------------------------\nPrivacy Suite\nblur-faces\nblur-text\n\nFire safety\nearly-smoke-and-fire-detection\nsmoking-and-vaping-detection\n\nPersonnel safety\nppe-detection\npfas-system-detection\nrailings-detection\n\nSuspicious activity\nshipping-activity-detection\nagressive-behaivior\n\n\nCompliance Policies\nmax-occupancy\n\nEquipment\nrust-and-corrosion-detection\n\nIR Camera\ntemperature-monitoring\n------------------------------------------------\n\n\u2728 More scenarios are added regularly \u2728\n</code></pre>"},{"location":"company/careers/#get-details-for-a-scenario","title":"Get details for a Scenario","text":"<p>You can get details about a scenario using <code>visionai scenario details</code> command. Specify the scenario you want additional details for. The details of a scenario include the dataset size, model accuracy metrics,</p> <pre><code>$ visionai scenario --name early-smoke-and-fire-detection details\n\n------------------------------------------------\nCategory: Fire safety\nScenario: early-smoke-and-fire-detection\nThis scenario has been trained on open-source datasets consisting of 126,293 images. The datasets images are primarily outdoors (70%), but do contain a good number of indoor images (30%). There is a ~50-50% mix of day vs night images. You can find more details about this scenario at visionify.ai/early-smoke-and-fire-detection.\n\n\nModel: smoke-and-fire-detection-1.0.1.pt\nModel size: 127MB\nModel type: Object Detection\nFramework: PyTorch\n\nModel performance:\nDataset size: 126,293 images\nAccuracy: 94.1%\nRecall: 93%\nF1-Score: 93.5%\n\nEvents:\nsmoke-detected  | Immediate\nfire-detected   | Immediate\n\nEvent examples:\n{\n    \"scenario\": \"smoke-and-fire-detection\",\n    \"event_name\": \"smoke-detected\",\n    \"event_details\": {\n        \"camera\": \"camera-01\",\n        \"date\": \"2023-01-04 11:05:02\",\n        \"confidence\": 0.92\n    }\n}\n------------------------------------------------\n</code></pre>"},{"location":"company/careers/#run-a-scenario","title":"Run a Scenario","text":"<p>Use <code>visionai run</code> command to run a scenario. In its simplest sense, you can run a single scenario on your web-cam. In a more complex use-case, you can specify a pipeline of scenarios, configure notification logic for each scenario, timings for each scenario etc.</p> <pre><code>$ visionai run --scenario early-smoke-and-fire-detection --camera OFFICE-01\n\nStarting early-smoke-and-fire-detection\n...\n</code></pre>"},{"location":"company/careers/#get-help-on-commands","title":"Get help on commands","text":"<p>You can get more help on any command by adding --help at the end of the command. For example, if you want to get details about pipeline commands, you can run the following commands.</p> <pre><code>$ visionai pipeline --help\n\n Usage: visionai pipeline [OPTIONS] COMMAND [ARGS]...\n\n Manage pipelines\n Pipeline is a sequence of preprocess routines and\n scenarios to be run on a given set of cameras. Each\n pipeline can be configured to run specific scenarios -\n each scenario with their own customizations for event\n notifications. This module provides robust methods for\n managing pipelines, showing their details, adding/remove\n cameras from pipelines and running a pipeline.\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 add-camera      Add a camera to a pipeline               \u2502\n\u2502 add-preprocess  Add a preprocess routine to a pipeline   \u2502\n\u2502 add-scenario    Add a scenario to a pipeline             \u2502\n\u2502 create          Create a named pipeline                  \u2502\n\u2502 remove-camera   Remove a camera from a pipeline          \u2502\n\u2502 reset           Reset the pipeline to original state.    \u2502\n\u2502 run             Run a pipeline of scenarios on given     \u2502\n\u2502                 cameras                                  \u2502\n\u2502 show            Show details of a pipeline               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n$ visionai pipeline add-scenario --help\n\n Usage: visionai pipeline add-scenario [OPTIONS]\n\n Add a scenario to a pipeline\n The order of the scenarios does not matter. All added\n scenarios are run in different threads. All scenarios are\n run after pre-processing stage is done.\n ``` Ex: visionai pipeline --name test_pipe add-scenario\n --name smoke-and-fire visionai pipeline --name test_pipe\n add-scenario --name ppe-detection visionai pipeline --name\n test_pipe run ```\n @arg pipeline - specify a named pipeline @arg scenario -\n specify name of the scenario to run\n @return None\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *  --pipeline        TEXT  pipeline name [default: None] \u2502\n\u2502                            [required]                    \u2502\n\u2502 *  --scenario        TEXT  scenario to add               \u2502\n\u2502                            [default: None]               \u2502\n\u2502                            [required]                    \u2502\n\u2502    --help                  Show this message and exit.   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"company/careers/#next-steps","title":"Next steps","text":"<p>Congratulations! You have successfully run the first scenario. Now go through Tutorials to learn about how to run multiple scnearios, how to configure each scenario for the events you need, how to set up the dependencies etc.</p> <p>Or you can also go through our scenarios page to explore the different scenarios available and their model details. If you have a need for a scenario to be implemented, do not hesitate to submit a request.</p>"},{"location":"company/contact/","title":"VisionAI","text":"<p>Documentation for VisionAI toolkit.</p>"},{"location":"company/contact/#overview","title":"Overview","text":"<p>VisionAI provides a set of command line utilities for you to manage different Vision AI scenarios that have been pre-developed and pre-tested. VisionAI focuses on workplace health and safety models - and majority of the models you see here have been developed with that in mind.</p> <p>These are production-ready model trained from open-source and academic datasets. We are continuously working on new scenarios - and our current scenario repo consists of over 60 scenarios that are listed here. They are developed with the intent of being easy-to-use for business. The framework also supports a whole bunch of custom scenarios.</p>"},{"location":"company/contact/#install-visionai","title":"Install VisionAI","text":"<p>Install VisionAI application through <code>PyPI</code>. There are other options available for install - including a Docker container option. These are detailed in installation section.</p> <pre><code>$ pip install visionai\n---&gt; 100%\n\nSuccessfully installed visionai\n\n\u2728 You are all set to use visionai toolkit \u2728\n</code></pre>"},{"location":"company/contact/#deploy-to-azure","title":"Deploy to Azure","text":"<p>Deploy a fully configured and tested solution directly from Azure Marketplace. VisionAI runs computer vision models, most of which run orders of magnitude faster if executed on a GPU machine. Our Azure Marketplace offer VisionAI Community Edition is available through Azure Marketplace here (TODO). The community edition deploys a fully configured Virtual Machine with the recommended hardware and software options. Get more details here.</p> <p></p> <ul> <li>TODO: Point to ARM template that needs to be deployed (using these instructions and here is an example JSON file).</li> </ul>"},{"location":"company/contact/#list-available-scenarios","title":"List available Scenarios","text":"<p>VisionAI is organized in terms of scenarios. Consider each scenario as being a business use-case, that is solved by a combination of Machine Learning models and an inference algorithm. For example Warn me when max occupancy of this area exceeds 80 people is a business scenario, where as the People detection is an ML model.</p> <p>VisionAI supports 60 scenarios currently and more are being added continuously. Our current focus is on Workplace Safety scenarios. Please contact us if a scenario you need is not present in our repo and we will look into it.</p> <pre><code>$ visionai scenarios list\n\n------------------------------------------------\nPrivacy Suite\nblur-faces\nblur-text\n\nFire safety\nearly-smoke-and-fire-detection\nsmoking-and-vaping-detection\n\nPersonnel safety\nppe-detection\npfas-system-detection\nrailings-detection\n\nSuspicious activity\nshipping-activity-detection\nagressive-behaivior\n\n\nCompliance Policies\nmax-occupancy\n\nEquipment\nrust-and-corrosion-detection\n\nIR Camera\ntemperature-monitoring\n------------------------------------------------\n\n\u2728 More scenarios are added regularly \u2728\n</code></pre>"},{"location":"company/contact/#get-details-for-a-scenario","title":"Get details for a Scenario","text":"<p>You can get details about a scenario using <code>visionai scenario details</code> command. Specify the scenario you want additional details for. The details of a scenario include the dataset size, model accuracy metrics,</p> <pre><code>$ visionai scenario --name early-smoke-and-fire-detection details\n\n------------------------------------------------\nCategory: Fire safety\nScenario: early-smoke-and-fire-detection\nThis scenario has been trained on open-source datasets consisting of 126,293 images. The datasets images are primarily outdoors (70%), but do contain a good number of indoor images (30%). There is a ~50-50% mix of day vs night images. You can find more details about this scenario at visionify.ai/early-smoke-and-fire-detection.\n\n\nModel: smoke-and-fire-detection-1.0.1.pt\nModel size: 127MB\nModel type: Object Detection\nFramework: PyTorch\n\nModel performance:\nDataset size: 126,293 images\nAccuracy: 94.1%\nRecall: 93%\nF1-Score: 93.5%\n\nEvents:\nsmoke-detected  | Immediate\nfire-detected   | Immediate\n\nEvent examples:\n{\n    \"scenario\": \"smoke-and-fire-detection\",\n    \"event_name\": \"smoke-detected\",\n    \"event_details\": {\n        \"camera\": \"camera-01\",\n        \"date\": \"2023-01-04 11:05:02\",\n        \"confidence\": 0.92\n    }\n}\n------------------------------------------------\n</code></pre>"},{"location":"company/contact/#run-a-scenario","title":"Run a Scenario","text":"<p>Use <code>visionai run</code> command to run a scenario. In its simplest sense, you can run a single scenario on your web-cam. In a more complex use-case, you can specify a pipeline of scenarios, configure notification logic for each scenario, timings for each scenario etc.</p> <pre><code>$ visionai run --scenario early-smoke-and-fire-detection --camera OFFICE-01\n\nStarting early-smoke-and-fire-detection\n...\n</code></pre>"},{"location":"company/contact/#get-help-on-commands","title":"Get help on commands","text":"<p>You can get more help on any command by adding --help at the end of the command. For example, if you want to get details about pipeline commands, you can run the following commands.</p> <pre><code>$ visionai pipeline --help\n\n Usage: visionai pipeline [OPTIONS] COMMAND [ARGS]...\n\n Manage pipelines\n Pipeline is a sequence of preprocess routines and\n scenarios to be run on a given set of cameras. Each\n pipeline can be configured to run specific scenarios -\n each scenario with their own customizations for event\n notifications. This module provides robust methods for\n managing pipelines, showing their details, adding/remove\n cameras from pipelines and running a pipeline.\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 add-camera      Add a camera to a pipeline               \u2502\n\u2502 add-preprocess  Add a preprocess routine to a pipeline   \u2502\n\u2502 add-scenario    Add a scenario to a pipeline             \u2502\n\u2502 create          Create a named pipeline                  \u2502\n\u2502 remove-camera   Remove a camera from a pipeline          \u2502\n\u2502 reset           Reset the pipeline to original state.    \u2502\n\u2502 run             Run a pipeline of scenarios on given     \u2502\n\u2502                 cameras                                  \u2502\n\u2502 show            Show details of a pipeline               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n$ visionai pipeline add-scenario --help\n\n Usage: visionai pipeline add-scenario [OPTIONS]\n\n Add a scenario to a pipeline\n The order of the scenarios does not matter. All added\n scenarios are run in different threads. All scenarios are\n run after pre-processing stage is done.\n ``` Ex: visionai pipeline --name test_pipe add-scenario\n --name smoke-and-fire visionai pipeline --name test_pipe\n add-scenario --name ppe-detection visionai pipeline --name\n test_pipe run ```\n @arg pipeline - specify a named pipeline @arg scenario -\n specify name of the scenario to run\n @return None\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *  --pipeline        TEXT  pipeline name [default: None] \u2502\n\u2502                            [required]                    \u2502\n\u2502 *  --scenario        TEXT  scenario to add               \u2502\n\u2502                            [default: None]               \u2502\n\u2502                            [required]                    \u2502\n\u2502    --help                  Show this message and exit.   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"company/contact/#next-steps","title":"Next steps","text":"<p>Congratulations! You have successfully run the first scenario. Now go through Tutorials to learn about how to run multiple scnearios, how to configure each scenario for the events you need, how to set up the dependencies etc.</p> <p>Or you can also go through our scenarios page to explore the different scenarios available and their model details. If you have a need for a scenario to be implemented, do not hesitate to submit a request.</p>"},{"location":"company/team/","title":"Changelog","text":""},{"location":"company/team/#visionai-changelog","title":"VisionAI Changelog","text":""},{"location":"company/team/#017-january-22-2023","title":"0.1.7 January 22, 2023","text":"<ul> <li>Implemented camera add/delete functionality</li> </ul>"},{"location":"company/team/#016-january-20-2023","title":"0.1.6 January 20, 2023","text":"<ul> <li>Implemented initial set of commands in different files (dummy implementation)</li> <li>Testing commands individually or through the main application</li> </ul>"},{"location":"company/team/#013-january-16-2023","title":"0.1.3 January 16, 2023","text":"<ul> <li>Basic overview and usage documentation is updated.</li> <li>Started using a termy JS script to show terminal animations nicely</li> </ul>"},{"location":"company/team/#012-january-14-20123","title":"0.1.2 January 14, 20123","text":"<ul> <li>Made MkDocs documents based on Typer format</li> <li>Registered CNAME to point to https://docs.visionify.ai</li> </ul>"},{"location":"company/team/#011-january-11-2023","title":"0.1.1 January 11, 2023","text":"<ul> <li>Updated Azure DevOps CI/CD to automatically publish package on each merge</li> <li>Initial set of commands for visionai application</li> <li>Made <code>visionai</code> as a callable CLI application through poetry</li> </ul>"},{"location":"company/team/#010-january-10-2023","title":"0.1.0 January 10, 2023","text":"<ul> <li>Initial release: <code>pip install visionai</code></li> <li>Pushed package to <code>PyPI</code> repository</li> </ul>"},{"location":"custom/","title":"Overview","text":""},{"location":"custom/#python-types","title":"Python types","text":"<p>If you need a refresher about how to use Python type hints, check the first part of FastAPI's Python types intro.</p> <p>You can also check the mypy cheat sheet.</p> <p>In short (very short), you can declare a function with parameters like:</p> <pre><code>from typing import Optional\n\ndef type_example(name: str, formal: bool = False, intro: Optional[str] = None):\n    pass\n</code></pre> <p>And your editor (and Typer) will know that:</p> <ul> <li><code>name</code> is of type <code>str</code> and is a required parameter.</li> <li><code>formal</code> is a <code>bool</code> and is by default <code>False</code>.</li> <li><code>intro</code> is an optional <code>str</code>, by default is <code>None</code>.</li> </ul> <p>These type hints are what give you autocomplete in your editor and several other features.</p> <p>Typer is based on these type hints.</p>"},{"location":"custom/#intro","title":"Intro","text":"<p>This tutorial shows you how to use Typer with all its features, step by step.</p> <p>Each section gradually builds on the previous ones, but it's structured to separate topics, so that you can go directly to any specific one to solve your specific CLI needs.</p> <p>It is also built to work as a future reference.</p> <p>So you can come back and see exactly what you need.</p>"},{"location":"custom/#run-the-code","title":"Run the code","text":"<p>All the code blocks can be copied and used directly (they are tested Python files).</p> <p>To run any of the examples, copy the code to a file <code>main.py</code>, and run it:</p> <pre><code>$ python main.py\n\n\u2728 The magic happens here \u2728\n</code></pre> <p>It is HIGHLY encouraged that you write or copy the code, edit it and run it locally.</p> <p>Using it in your editor is what really shows you the benefits of Typer, seeing how little code you have to write, all the type checks, autocompletion, etc.</p> <p>And running the examples is what will really help you understand what is going on.</p> <p>You can learn a lot more by running some examples and playing around with them than by reading all the docs here.</p>"},{"location":"custom/#install-typer","title":"Install Typer","text":"<p>The first step is to install Typer.</p> <p>For the tutorial, you might want to install it with all the optional dependencies and features:</p> <pre><code>$ pip install \"typer[all]\"\n---&gt; 100%\nSuccessfully installed typer click shellingham rich\n</code></pre> <p>...that also includes <code>rich</code> and <code>shellingham</code>.</p>"},{"location":"custom/faqs/","title":"FAQs","text":"<p>Testing Typer applications is very easy with pytest.</p> <p>Let's say you have an application <code>app/main.py</code> with:</p> <pre><code>{!../docs_src/testing/app01/main.py!}\n</code></pre> <p>So, you would use it like:</p> <pre><code>$ python main.py Camila --city Berlin\n\nHello Camila\nLet's have a coffee in Berlin\n</code></pre> <p>And the directory also has an empty <code>app/__init__.py</code> file.</p> <p>So, the <code>app</code> is a \"Python package\".</p>"},{"location":"custom/faqs/#test-the-app","title":"Test the app","text":""},{"location":"custom/faqs/#import-and-create-a-clirunner","title":"Import and create a <code>CliRunner</code>","text":"<p>Create another file/module <code>app/test_main.py</code>.</p> <p>Import <code>CliRunner</code> and create a <code>runner</code> object.</p> <p>This runner is what will \"invoke\" or \"call\" your command line application.</p> <pre><code>{!../docs_src/testing/app01/test_main.py!}\n</code></pre> <p>Tip</p> <p>It's important that the name of the file starts with <code>test_</code>, that way pytest will be able to detect it and use it automatically.</p>"},{"location":"custom/faqs/#call-the-app","title":"Call the app","text":"<p>Then create a function <code>test_app()</code>.</p> <p>And inside of the function, use the <code>runner</code> to <code>invoke</code> the application.</p> <p>The first parameter to <code>runner.invoke()</code> is a <code>Typer</code> app.</p> <p>The second parameter is a <code>list</code> of <code>str</code>, with all the text you would pass in the command line, right as you would pass it:</p> <pre><code>{!../docs_src/testing/app01/test_main.py!}\n</code></pre> <p>Tip</p> <p>The name of the function has to start with <code>test_</code>, that way pytest can detect it and use it automatically.</p>"},{"location":"custom/faqs/#check-the-result","title":"Check the result","text":"<p>Then, inside of the test function, add <code>assert</code> statements to ensure that everything in the result of the call is as it should be.</p> <pre><code>{!../docs_src/testing/app01/test_main.py!}\n</code></pre> <p>Here we are checking that the exit code is 0, as it is for programs that exit without errors.</p> <p>Then we check that the text printed to \"standard output\" contains the text that our CLI program prints.</p> <p>Tip</p> <p>You could also check <code>result.stderr</code> for \"standard error\" independently from \"standard output\" if your <code>CliRunner</code> instance is created with the <code>mix_stderr=False</code> argument.</p> <p>Info</p> <p>If you need a refresher about what is \"standard output\" and \"standard error\" check the section in Printing and Colors: \"Standard Output\" and \"Standard Error\"{.internal-link target=_blank}.</p>"},{"location":"custom/faqs/#call-pytest","title":"Call <code>pytest</code>","text":"<p>Then you can call <code>pytest</code> in your directory and it will run your tests:</p> <pre><code>$ pytest\n\n================ test session starts ================\nplatform linux -- Python 3.6.9, pytest-5.3.5, py-1.8.1, pluggy-0.13.1\nrootdir: /home/user/code/superawesome-cli/app\nplugins: forked-1.1.3, xdist-1.31.0, cov-2.8.1\ncollected 1 item\n\n---&gt; 100%\n\ntest_main.py &lt;span style=\"color: green; white-space: pre;\"&gt;.                                 [100%]&lt;/span&gt;\n\n&lt;span style=\"color: green;\"&gt;================= 1 passed in 0.03s =================&lt;/span&gt;\n</code></pre>"},{"location":"custom/faqs/#testing-input","title":"Testing input","text":"<p>If you have a CLI with prompts, like:</p> <pre><code>{!../docs_src/testing/app02/main.py!}\n</code></pre> <p>That you would use like:</p> <pre><code>$ python main.py Camila\n\n# Email: $ camila@example.com\n\nHello Camila, your email is: camila@example.com\n</code></pre> <p>You can test the input typed in the terminal using <code>input=\"camila@example.com\\n\"</code>.</p> <p>This is because what you type in the terminal goes to \"standard input\" and is handled by the operating system as if it was a \"virtual file\".</p> <p>Info</p> <p>If you need a refresher about what is \"standard output\", \"standard error\", and \"standard input\" check the section in Printing and Colors: \"Standard Output\" and \"Standard Error\"{.internal-link target=_blank}.</p> <p>When you hit the ENTER key after typing the email, that is just a \"new line character\". And in Python that is represented with <code>\"\\n\"</code>.</p> <p>So, if you use <code>input=\"camila@example.com\\n\"</code> it means: \"type <code>camila@example.com</code> in the terminal, then hit the ENTER key\":</p> <pre><code>{!../docs_src/testing/app02/test_main.py!}\n</code></pre>"},{"location":"custom/faqs/#test-a-function","title":"Test a function","text":"<p>If you have a script and you never created an explicit <code>typer.Typer</code> app, like:</p> <pre><code>{!../docs_src/testing/app03/main.py!}\n</code></pre> <p>...you can still test it, by creating an app during testing:</p> <pre><code>{!../docs_src/testing/app03/test_main.py!}\n</code></pre> <p>Of course, if you are testing that script, it's probably easier/cleaner to just create the explicit <code>typer.Typer</code> app in <code>main.py</code> instead of creating it just during the test.</p> <p>But if you want to keep it that way, e.g. because it's a simple example in documentation, then you can use that trick.</p>"},{"location":"custom/faqs/#about-the-appcommand-decorator","title":"About the <code>app.command</code> decorator","text":"<p>Notice the <code>app.command()(main)</code>.</p> <p>If it's not obvious what it's doing, continue reading...</p> <p>You would normally write something like:</p> <pre><code>@app.command()\ndef main(name: str = \"World\"):\n    # Some code here\n</code></pre> <p>But <code>@app.command()</code> is just a decorator.</p> <p>That's equivalent to:</p> <pre><code>def main(name: str = \"World\"):\n    # Some code here\n\ndecorator = app.command()\n\nnew_main = decorator(main)\nmain = new_main\n</code></pre> <p><code>app.command()</code> returns a function (<code>decorator</code>) that takes another function as it's only parameter (<code>main</code>).</p> <p>And by using the <code>@something</code> you normally tell Python to replace the thing below (the function <code>main</code>) with the return of the <code>decorator</code> function (<code>new_main</code>).</p> <p>Now, in the specific case of Typer, the decorator doesn't change the original function. It registers it internally and returns it unmodified.</p> <p>So, <code>new_main</code> is actually the same original <code>main</code>.</p> <p>So, in the case of Typer, as it doesn't really modify the decorated function, that would be equivalent to:</p> <pre><code>def main(name: str = \"World\"):\n    # Some code here\n\ndecorator = app.command()\n\ndecorator(main)\n</code></pre> <p>But then we don't need to create the variable <code>decorator</code> to use it below, we can just use it directly:</p> <pre><code>def main(name: str = \"World\"):\n    # Some code here\n\napp.command()(main)\n</code></pre> <p>...that's it. It's still probably simpler to just create the explicit <code>typer.Typer</code> in the <code>main.py</code> file \ud83d\ude05.</p>"},{"location":"custom/licensing/","title":"License","text":"<p>When you create a CLI program with Typer you probably want to create your own Python package.</p> <p>That's what allows your users to install it and have it as an independent program that they can use in their terminal.</p> <p>And that's also required for shell auto completion to work (unless you use your program through Typer CLI{.internal-link target=_blank}).</p> <p>Nowadays, there are several ways and tools to create Python packages (what you install with <code>pip install something</code>).</p> <p>You might even have your favorite already.</p> <p>Here's a very opinionated, short guide, showing one of the alternative ways of creating a Python package with a Typer app, from scratch.</p> <p>Tip</p> <p>If you already have a favorite way of creating Python packages, feel free to skip this.</p>"},{"location":"custom/licensing/#prerequisites","title":"Prerequisites","text":"<p>For this guide we'll use Poetry.</p> <p>Poetry's docs are great, so go ahead, check them and install it.</p>"},{"location":"custom/licensing/#create-a-project","title":"Create a project","text":"<p>Let's say we want to create a CLI application called <code>portal-gun</code>.</p> <p>To make sure your package doesn't collide with the package created by someone else, we'll name it with a prefix of your name.</p> <p>So, if your name is Rick, we'll call it <code>rick-portal-gun</code>.</p> <p>Create a project with Poetry:</p> <pre><code>$ poetry new rick-portal-gun\n\nCreated package rick_portal_gun in rick-portal-gun\n\n// Enter the new project directory\ncd ./rick-portal-gun\n</code></pre>"},{"location":"custom/licensing/#dependencies-and-environment","title":"Dependencies and environment","text":"<p>Add <code>typer[all]</code> to your dependencies:</p> <pre><code>$ poetry add \"typer[all]\"\n\n// It creates a virtual environment for your project\nCreating virtualenv rick-portal-gun-w31dJa0b-py3.6 in /home/rick/.cache/pypoetry/virtualenvs\nUsing version ^0.1.0 for typer\n\nUpdating dependencies\nResolving dependencies... (1.2s)\n\nWriting lock file\n\n---&gt; 100%\n\nPackage operations: 15 installs, 0 updates, 0 removals\n\n  - Installing zipp (3.1.0)\n  - Installing importlib-metadata (1.5.0)\n  - Installing pyparsing (2.4.6)\n  - Installing six (1.14.0)\n  - Installing attrs (19.3.0)\n  - Installing click (7.1.1)\n  - Installing colorama (0.4.3)\n  - Installing more-itertools (8.2.0)\n  - Installing packaging (20.3)\n  - Installing pluggy (0.13.1)\n  - Installing py (1.8.1)\n  - Installing shellingham (1.3.2)\n  - Installing wcwidth (0.1.8)\n  - Installing pytest (5.4.1)\n  - Installing typer (0.0.11)\n\n// Activate that new virtual environment\n$ poetry shell\n\nSpawning shell within /home/rick/.cache/pypoetry/virtualenvs/rick-portal-gun-w31dJa0b-py3.6\n\n// Open an editor using this new environment, for example VS Code\n$ code ./\n</code></pre> <p>You can see that you have a generated project structure that looks like:</p> <pre><code>.\n\u251c\u2500\u2500 poetry.lock\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.rst\n\u251c\u2500\u2500 rick_portal_gun\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 test_rick_portal_gun.py\n</code></pre>"},{"location":"custom/licensing/#create-your-app","title":"Create your app","text":"<p>Now let's create an extremely simple Typer app.</p> <p>Create a file <code>rick_portal_gun/main.py</code> with:</p> <pre><code>import typer\n\n\napp = typer.Typer()\n\n\n@app.callback()\ndef callback():\n    \"\"\"\n    Awesome Portal Gun\n    \"\"\"\n\n\n@app.command()\ndef shoot():\n    \"\"\"\n    Shoot the portal gun\n    \"\"\"\n    typer.echo(\"Shooting portal gun\")\n\n\n@app.command()\ndef load():\n    \"\"\"\n    Load the portal gun\n    \"\"\"\n    typer.echo(\"Loading portal gun\")\n</code></pre> <p>Tip</p> <p>As we are creating an installable Python package, there's no need to add a section with <code>if __name__ == \"__main__\":</code>.</p>"},{"location":"custom/licensing/#modify-the-readme","title":"Modify the README","text":"<p>Let's change the README. By default it's a file <code>README.rst</code>.</p> <p>Let's change it to <code>README.md</code>. So, change the extension from <code>.rst</code> to <code>.md</code>.</p> <p>So that we can use Markdown instead of reStructuredText.</p> <p>And change the file to have something like:</p> <pre><code># Portal Gun\n\nThe awesome Portal Gun\n</code></pre>"},{"location":"custom/licensing/#modify-your-project-metadata","title":"Modify your project metadata","text":"<p>Edit your file <code>pyproject.toml</code>.</p> <p>It would look something like:</p> <pre><code>[tool.poetry]\nname = \"rick-portal-gun\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"Rick Sanchez &lt;rick@example.com&gt;\"]\n\n[tool.poetry.dependencies]\npython = \"^3.6\"\ntyper = {extras = [\"all\"], version = \"^0.1.0\"}\n\n[tool.poetry.dev-dependencies]\npytest = \"^5.2\"\n\n[build-system]\nrequires = [\"poetry&gt;=0.12\"]\nbuild-backend = \"poetry.masonry.api\"\n</code></pre> <p>We changed the default README, so let's make it use the new <code>README.md</code>.</p> <p>Add the line:</p> <pre><code>[tool.poetry]\nname = \"rick-portal-gun\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"Rick Sanchez &lt;rick@example.com&gt;\"]\nreadme = \"README.md\"\n\n[tool.poetry.dependencies]\npython = \"^3.6\"\ntyper = {extras = [\"all\"], version = \"^0.1.0\"}\n\n[tool.poetry.dev-dependencies]\npytest = \"^5.2\"\n\n[build-system]\nrequires = [\"poetry&gt;=0.12\"]\nbuild-backend = \"poetry.masonry.api\"\n</code></pre>"},{"location":"custom/licensing/#add-a-script","title":"Add a \"script\"","text":"<p>We are creating a Python package that can be installed with <code>pip install</code>.</p> <p>But we want it to provide a CLI program that can be executed in the shell.</p> <p>To do that, we add a configuration to the <code>pyproject.toml</code> in the section <code>[tool.poetry.scripts]</code>:</p> <pre><code>[tool.poetry]\nname = \"rick-portal-gun\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"Rick Sanchez &lt;rick@example.com&gt;\"]\nreadme = \"README.md\"\n\n[tool.poetry.scripts]\nrick-portal-gun = \"rick_portal_gun.main:app\"\n\n[tool.poetry.dependencies]\npython = \"^3.6\"\ntyper = {extras = [\"all\"], version = \"^0.1.0\"}\n\n[tool.poetry.dev-dependencies]\npytest = \"^5.2\"\n\n[build-system]\nrequires = [\"poetry&gt;=0.12\"]\nbuild-backend = \"poetry.masonry.api\"\n</code></pre> <p>Here's what that line means:</p> <p><code>rick-portal-gun</code>: will be the name of the CLI program. That's how we will call it in the terminal once it is installed. Like:</p> <pre><code>$ rick-portal-gun\n\n// Something happens here \u2728\n</code></pre> <p><code>rick_portal_gun.main</code>, in the part <code>\"rick_portal_gun.main:app\"</code>, with underscores, refers to the Python module to import. That's what someone would use in a section like:</p> <pre><code>from rick_portal_gun.main import # something goes here\n</code></pre> <p>The <code>app</code> in <code>\"rick_portal_gun.main:app\"</code> is the thing to import from the module, and to call as a function, like:</p> <pre><code>from rick_portal_gun.main import app\napp()\n</code></pre> <p>That config section tells Poetry that when this package is installed we want it to create a command line program called <code>rick-portal-gun</code>.</p> <p>And that the object to call (like a function) is the one in the variable <code>app</code> inside of the module <code>rick_portal_gun.main</code>.</p>"},{"location":"custom/licensing/#install-your-package","title":"Install your package","text":"<p>That's what we need to create a package.</p> <p>You can now install it:</p> <pre><code>$ poetry install\n\nInstalling dependencies from lock file\n\nNo dependencies to install or update\n\n  - Installing rick-portal-gun (0.1.0)\n</code></pre>"},{"location":"custom/licensing/#try-your-cli-program","title":"Try your CLI program","text":"<p>Your package is installed in the environment created by Poetry, but you can already use it.</p> <pre><code>// You can use the which program to check which rick-portal-gun program is available (if any)\n$ which rick-portal-gun\n\n// You get the one from your environment\n/home/rick/.cache/pypoetry/virtualenvs/rick-portal-gun-w31dJa0b-py3.6/bin/rick-portal-gun\n\n// Try it\n$ rick-portal-gun\n\n// You get all the standard help\nUsage: rick-portal-gun [OPTIONS] COMMAND [ARGS]...\n\n  Awesome Portal Gun\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n\n  --help                Show this message and exit.\n\nCommands:\n  load   Load the portal gun\n  shoot  Shoot the portal gun\n</code></pre>"},{"location":"custom/licensing/#create-a-wheel-package","title":"Create a wheel package","text":"<p>Python packages have a standard format called a \"wheel\". It's a file that ends in <code>.whl</code>.</p> <p>You can create a wheel with Poetry:</p> <pre><code>$ poetry build\n\nBuilding rick-portal-gun (0.1.0)\n - Building sdist\n - Built rick-portal-gun-0.1.0.tar.gz\n\n - Building wheel\n - Built rick_portal_gun-0.1.0-py3-none-any.whl\n</code></pre> <p>After that, if you check in your project directory, you should now have a couple of extra files at <code>./dist/</code>:</p> <pre><code>.\n\u251c\u2500\u2500 dist\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rick_portal_gun-0.1.0-py3-none-any.whl\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 rick-portal-gun-0.1.0.tar.gz\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 ...\n</code></pre> <p>The <code>.whl</code> is the wheel file. You can send that wheel file to anyone and they can use it to install your program (we'll see how to upload it to PyPI in a bit).</p>"},{"location":"custom/licensing/#test-your-wheel-package","title":"Test your wheel package","text":"<p>Now you can open another terminal and install that package from the file for your own user with:</p> <pre><code>$ pip install --user /home/rock/code/rick-portal-gun/dist/rick_portal_gun-0.1.0-py3-none-any.whl\n\n---&gt; 100%\n</code></pre> <p>Warning</p> <p>The <code>--user</code> is important, that ensures you install it in your user's directory and not in the global system.</p> <p>If you installed it in the global system (e.g. with <code>sudo</code>) you could install a version of a library (e.g. a sub-dependency) that is incompatible with your system.</p> <p>Tip</p> <p>Bonus points if you use <code>pipx</code> to install it while keeping an isolated environment for your Python CLI programs \ud83d\ude80</p> <p>Now you have your CLI program installed. And you can use it freely:</p> <pre><code>$ rick-portal-gun shoot\n\n// It works \ud83c\udf89\nShooting portal gun\n</code></pre> <p>Having it installed globally (and not in a single environment), you can now install completion globally for it:</p> <pre><code>$ rick-portal-gun --install-completion\n\nzsh completion installed in /home/user/.zshrc.\nCompletion will take effect once you restart the terminal.\n</code></pre> <p>Tip</p> <p>If you want to remove completion you can just delete the added line in that file.</p> <p>And after you restart the terminal you will get completion for your new CLI program:</p> <pre><code>$ rick-portal-gun [TAB][TAB]\n\n// You get completion for your CLI program \u2728\nload   -- Load the portal gun\nshoot  -- Shoot the portal gun\n</code></pre>"},{"location":"custom/licensing/#support-python-m-optional","title":"Support <code>python -m</code> (optional)","text":"<p>You may have seen that you can call many Python modules as scripts with <code>python -m some-module</code>.</p> <p>For example, one way to call <code>pip</code> is:</p> <pre><code>$ pip install fastapi\n</code></pre> <p>But you can also call Python with the <code>-m</code> CLI Option and pass a module for it to execute as if it was a script, like:</p> <pre><code>$ python -m pip install fastapi\n</code></pre> <p>Here we pass <code>pip</code> as the value for <code>-m</code>, so, Python will execute the module <code>pip</code> as if it was a script. And then it will pass the rest of the CLI Parameters (<code>install fastapi</code>) to it.</p> <p>These two are more or less equivalent, the <code>install fastapi</code> will be passed to <code>pip</code>.</p> <p>Tip</p> <p>In the case of <code>pip</code>, in many occasions it's actually recommended that you run it with <code>python -m</code>, because if you create a virtual environment with its own <code>python</code>, that will ensure that you use the <code>pip</code> from that environment.</p>"},{"location":"custom/licensing/#add-a-__main__py","title":"Add a <code>__main__.py</code>","text":"<p>You can support that same style of calling the package/module for your own package, simply by adding a file <code>__main__.py</code>.</p> <p>Python will look for that file and execute it.</p> <p>The file would live right beside <code>__init__.py</code>:</p> <pre><code>.\n\u251c\u2500\u2500 poetry.lock\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.rst\n\u251c\u2500\u2500 rick_portal_gun\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 __main__.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 test_rick_portal_gun.py\n</code></pre> <p>No other file has to import it, you don't have to reference it in your <code>pyproject.toml</code> or anything else, it just works by default, as it is standard Python behavior.</p> <p>Then in that file you can execute your Typer program:</p> <pre><code>from .main import app\napp()\n</code></pre> <p>Now, after installing your package, if you call it with <code>python -m</code> it will work (for the main part):</p> <pre><code>$ python -m rick_portal_gun\n\nUsage: __main__.py [OPTIONS] COMMAND [ARGS]...\n\n  Awesome Portal Gun\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n\n  --help                Show this message and exit.\n\nCommands:\n  load   Load the portal gun\n  shoot  Shoot the portal gun\n</code></pre> <p>Tip</p> <p>Notice that you have to pass the importable version of the package name, so <code>rick_portal_gun</code> instead of <code>rick-portal-gun</code>.</p> <p>That works! \ud83d\ude80 Sort of... \ud83e\udd14</p> <p>See the <code>__main__.py</code> in the help instead of <code>rick-portal-gun</code>? We'll fix that next.</p>"},{"location":"custom/licensing/#set-a-program-name-in-__main__py","title":"Set a program name in <code>__main__.py</code>","text":"<p>We are setting the program name in the file <code>pyproject.toml</code> in the line like:</p> <pre><code>[tool.poetry.scripts]\nrick-portal-gun = \"rick_portal_gun.main:app\"\n</code></pre> <p>But when Python runs our package as a script with <code>python -m</code>, it doesn't have the information of the program name.</p> <p>So, to fix the help text to use the correct program name when called with <code>python -m</code>, we can pass it to the app in <code>__main__.py</code>:</p> <pre><code>from .main import app\napp(prog_name=\"rick-portal-gun\")\n</code></pre> <p>Tip</p> <p>You can pass all the arguments and keyword arguments you could pass to a Click application, including <code>prog_name</code>.</p> <pre><code>$ python -m rick_portal_gun\n\nUsage: rick-portal-gun [OPTIONS] COMMAND [ARGS]...\n\n  Awesome Portal Gun\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n\n  --help                Show this message and exit.\n\nCommands:\n  load   Load the portal gun\n  shoot  Shoot the portal gun\n</code></pre> <p>Great! That works correctly! \ud83c\udf89 \u2705</p> <p>Notice that now it uses <code>rick-portal-gun</code> instead of <code>__main__.py</code> in the help.</p>"},{"location":"custom/licensing/#autocompletion-and-python-m","title":"Autocompletion and <code>python -m</code>","text":"<p>Have in mind that TAB completion (shell auto-completion) won't work when using <code>python -m</code>.</p> <p>Auto-completion depends on the name of the program called, it's tied to each specific program name.</p> <p>So, to have shell completion for <code>rick-portal-gun</code> you would have to call it directly:</p> <pre><code>$ rick-portal-gun [TAB][TAB]\n</code></pre> <p>But you can still support <code>python -m</code> for the cases where it's useful.</p>"},{"location":"custom/licensing/#publish-to-pypi-optional","title":"Publish to PyPI (optional)","text":"<p>You can publish that new package to PyPI to make it public, so others can install it easily.</p> <p>So, go ahead and create an account there (it's free).</p>"},{"location":"custom/licensing/#pypi-api-token","title":"PyPI API token","text":"<p>To do it, you first need to configure a PyPI auth token.</p> <p>Login to PyPI.</p> <p>And then go to https://pypi.org/manage/account/token/ to create a new token.</p> <p>Let's say your new API token is:</p> <pre><code>pypi-wubalubadubdub-deadbeef1234\n</code></pre> <p>Now configure Poetry to use this token with the command <code>poetry config pypi-token.pypi</code>:</p> <pre><code>$ poetry config pypi-token.pypi pypi-wubalubadubdub-deadbeef1234\n// It won't show any output, but it's already configured\n</code></pre>"},{"location":"custom/licensing/#publish-to-pypi","title":"Publish to PyPI","text":"<p>Now you can publish your package with Poetry.</p> <p>You could build the package (as we did above) and then publish later, or you could tell poetry to build it before publishing in one go:</p> <pre><code>$ poetry publish --build\n\n# There are 2 files ready for publishing. Build anyway? (yes/no) [no] $ yes\n\n---&gt; 100%\n\nBuilding rick-portal-gun (0.1.0)\n - Building sdist\n - Built rick-portal-gun-0.1.0.tar.gz\n\n - Building wheel\n - Built rick_portal_gun-0.1.0-py3-none-any.whl\n\nPublishing rick-portal-gun (0.1.0) to PyPI\n - Uploading rick-portal-gun-0.1.0.tar.gz 100%\n - Uploading rick_portal_gun-0.1.0-py3-none-any.whl 100%\n</code></pre> <p>Now you can go to PyPI and check your projects at https://pypi.org/manage/projects/.</p> <p>You should now see your new \"rick-portal-gun\" package.</p>"},{"location":"custom/licensing/#install-from-pypi","title":"Install from PyPI","text":"<p>Now to see that we can install it form PyPI, open another terminal, and uninstall the currently installed package.</p> <pre><code>$ pip uninstall rick-portal-gun\n\nFound existing installation: rick-portal-gun 0.1.0\nUninstalling rick-portal-gun-0.1.0:\n  Would remove:\n    /home/user/.local/bin/rick-portal-gun\n    /home/user/.local/lib/python3.6/site-packages/rick_portal_gun-0.1.0.dist-info/*\n    /home/user/.local/lib/python3.6/site-packages/rick_portal_gun/*\n# Proceed (y/n)? $ y\n    Successfully uninstalled rick-portal-gun-0.1.0\n</code></pre> <p>And now install it again, but this time using just the name, so that <code>pip</code> pulls it from PyPI:</p> <pre><code>$ pip install --user rick-portal-gun\n\n// Notice that it says \"Downloading\" \ud83d\ude80\nCollecting rick-portal-gun\n  Downloading rick_portal_gun-0.1.0-py3-none-any.whl (1.8 kB)\nRequirement already satisfied: typer[all]&lt;0.0.12,&gt;=0.0.11 in ./.local/lib/python3.6/site-packages (from rick-portal-gun) (0.0.11)\nRequirement already satisfied: click&lt;7.2.0,&gt;=7.1.1 in ./anaconda3/lib/python3.6/site-packages (from typer[all]&lt;0.0.12,&gt;=0.0.11-&gt;rick-portal-gun) (7.1.1)\nRequirement already satisfied: colorama; extra == \"all\" in ./anaconda3/lib/python3.6/site-packages (from typer[all]&lt;0.0.12,&gt;=0.0.11-&gt;rick-portal-gun) (0.4.3)\nRequirement already satisfied: shellingham; extra == \"all\" in ./anaconda3/lib/python3.6/site-packages (from typer[all]&lt;0.0.12,&gt;=0.0.11-&gt;rick-portal-gun) (1.3.1)\nInstalling collected packages: rick-portal-gun\nSuccessfully installed rick-portal-gun-0.1.0\n</code></pre> <p>And now test the newly installed package from PyPI:</p> <pre><code>$ rick-portal-gun load\n\n// It works! \ud83c\udf89\nLoading portal gun\n</code></pre>"},{"location":"custom/licensing/#generate-docs-with-typer-cli-optional","title":"Generate docs with Typer CLI (optional)","text":"<p>You can install and use Typer CLI{.internal-link target=_blank} to generate docs for your package.</p> <p>After installing it, you can use it to generate a new <code>README.md</code>:</p> <pre><code>$ typer rick_portal_gun.main utils docs --output README.md --name rick-portal-gun\n\nDocs saved to: README.md\n</code></pre> <p>You just have to pass it the module to import (<code>rick_portal_gun.main</code>) and it will detect the <code>typer.Typer</code> app automatically.</p> <p>By specifying the <code>--name</code> of the program it will be able to use it while generating the docs.</p>"},{"location":"custom/licensing/#publish-a-new-version-with-the-docs","title":"Publish a new version with the docs","text":"<p>Now you can publish a new version with the updated docs.</p> <p>For that you need to first increase the version in <code>pyproject.toml</code>:</p> <pre><code>[tool.poetry]\nname = \"rick-portal-gun\"\nversion = \"0.2.0\"\ndescription = \"\"\nauthors = [\"Rick Sanchez &lt;rick@example.com&gt;\"]\nreadme = \"README.md\"\n\n[tool.poetry.scripts]\nrick-portal-gun = \"rick_portal_gun.main:app\"\n\n[tool.poetry.dependencies]\npython = \"^3.6\"\ntyper = {extras = [\"all\"], version = \"^0.1.0\"}\n\n[tool.poetry.dev-dependencies]\npytest = \"^5.2\"\n\n[build-system]\nrequires = [\"poetry&gt;=0.12\"]\nbuild-backend = \"poetry.masonry.api\"\n</code></pre> <p>And in the file <code>rick_portal_gun/__init__.py</code>:</p> <pre><code>__version__ = '0.2.0'\n</code></pre> <p>And then build and publish again:</p> <pre><code>$ poetry publish --build\n\n---&gt; 100%\n\nBuilding rick-portal-gun (0.2.0)\n - Building sdist\n - Built rick-portal-gun-0.2.0.tar.gz\n\n - Building wheel\n - Built rick_portal_gun-0.2.0-py3-none-any.whl\n\nPublishing rick-portal-gun (0.2.0) to PyPI\n - Uploading rick-portal-gun-0.2.0.tar.gz 100%\n - Uploading rick_portal_gun-0.2.0-py3-none-any.whl 100%\n</code></pre> <p>And now you can go to PyPI, to the project page, and reload it, and it will now have your new generated docs.</p>"},{"location":"custom/licensing/#whats-next","title":"What's next","text":"<p>This is a very simple guide. You could add many more steps.</p> <p>For example, you should use Git, the version control system, to save your code.</p> <p>You can add a lot of extra metadata to your <code>pyproject.toml</code>, check the docs for Poetry: Libraries.</p> <p>You could use <code>pipx</code> to manage your installed CLI Python programs in isolated environments.</p> <p>Maybe use automatic formatting with Black.</p> <p>You'll probably want to publish your code as open source to GitHub.</p> <p>And then you could integrate a CI tool to run your tests and deploy your package automatically.</p> <p>And there's a long etc. But now you have the basics and you can continue on your own \ud83d\ude80.</p>"},{"location":"custom/overview/","title":"Overview","text":"<p>Warning</p> <p>This is a more advanced topic, if you are starting with Typer, feel free to skip it.</p> <p>It will be mostly useful for people that already work with Click and have questions around it.</p> <p>Typer is powered by Click. It does all the work underneath.</p> <p>Here is some more information related to using both together.</p>"},{"location":"custom/overview/#a-single-app-with-both-click-and-typer","title":"A single app with both Click and Typer","text":"<p>If you already have a Click application and want to migrate to Typer, or to add some Typer components, you can get a Click <code>Command</code> from your Typer application and then use Click directly.</p>"},{"location":"custom/overview/#how-click-works","title":"How Click works","text":"<p>Before knowing how to combine Click and Typer, let's first check a little about how Click works.</p>"},{"location":"custom/overview/#click-command","title":"Click <code>Command</code>","text":"<p>Any Click application has an object of class <code>Command</code>. That's, more or less, the most basic Click object.</p> <p>A <code>Command</code> can have its own CLI arguments and CLI options, and it has a function that it calls.</p> <p>For example, in this Click app:</p> <pre><code>{!../docs_src/using_click/tutorial001.py!}\n</code></pre> <p>The original <code>hello</code> variable is converted by Click from a function to a <code>Command</code> object. And the original <code>hello</code> function is used by that <code>Command</code> internally, but it is no longer named <code>hello</code> (as <code>hello</code> is now a Click <code>Command</code>).</p>"},{"location":"custom/overview/#click-group","title":"Click <code>Group</code>","text":"<p>Then Click also has a <code>Group</code> class, it inherits from <code>Command</code>. So, a <code>Group</code> object is also a <code>Command</code>.</p> <p>A <code>Group</code> can also have its own CLI arguments and CLI options.</p> <p>A <code>Group</code> can have subcommands of class <code>Command</code> or sub groups of class <code>Group</code> as well.</p> <p>And a <code>Group</code> can also have a function that it calls, right before calling the function for any specific subcommand.</p> <p>For example:</p> <pre><code>{!../docs_src/using_click/tutorial002.py!}\n</code></pre> <p>The <code>cli</code> variable is converted by Click from a function to a <code>Group</code> object. And the original <code>cli</code> function is used by that <code>Group</code> internally.</p> <p>Tip</p> <p>The original <code>cli</code> function would be the equivalent of a Typer Callback{.internal-link target=_blank}.</p> <p>Then the <code>cli</code> variable, that now is a <code>Group</code> object, is used to add sub-commands.</p>"},{"location":"custom/overview/#how-typer-works","title":"How Typer works","text":"<p>Typer doesn't modify the functions. You create an explicit variable of class <code>typer.Typer</code> and use it to register those functions.</p> <p>And then, when you call the app, Typer goes and creates a Click <code>Command</code> (or <code>Group</code>), and then calls it.</p> <p>If your app only has one command, then when you call it, Typer creates a single Click <code>Command</code> object and calls it.</p> <p>But Typer creates a Click <code>Group</code> object if your app has any of:</p> <ul> <li>More than one command.</li> <li>A callback.</li> <li>Sub-Typer apps (sub commands).</li> </ul> <p>Tip</p> <p>If you want to learn more about this check the section One or Multiple Commands{.internal-link target=_blank}.</p>"},{"location":"custom/overview/#combine-click-and-typer","title":"Combine Click and Typer","text":"<p>Typer uses an internal function <code>typer.main.get_command()</code> to generate a Click <code>Command</code> (or <code>Group</code>) from a <code>typer.Typer</code> object.</p> <p>You can use it directly, and use the Click object with other Click applications.</p>"},{"location":"custom/overview/#including-a-click-app-in-a-typer-app","title":"Including a Click app in a Typer app","text":"<p>For example, you could have a Typer app, generate a Click <code>Group</code> from it, and then include other Click apps in it:</p> <pre><code>{!../docs_src/using_click/tutorial003.py!}\n</code></pre> <p>Notice that we add a callback that does nothing (only document the CLI program), to make sure Typer creates a Click <code>Group</code>. That way we can add sub-commands to that Click <code>Group</code>.</p> <p>Then we generate a Click object from our <code>typer.Typer</code> app (<code>typer_click_object</code>), and then we can include another Click object (<code>hello</code>) in this Click <code>Group</code>.</p> <p>And that way, our Typer app will have a subcommand <code>top</code> built with Typer, and a subcommand <code>hello</code> built with Click.</p> <p>Check it:</p> <pre><code>$ python main.py\n\n// Notice we have both subcommands, top and hello\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nError: Missing command.\n\n// Call the Typer part\n$ python main.py top\n\nThe Typer app is at the top level\n\n// Call the Click part\n$ python main.py hello --name Camila\n\nHello Camila!\n</code></pre>"},{"location":"custom/overview/#including-a-typer-app-in-a-click-app","title":"Including a Typer app in a Click app","text":"<p>The same way, you can do the contrary and include a Typer sub app in a bigger Click app:</p> <pre><code>{!../docs_src/using_click/tutorial004.py!}\n</code></pre> <p>Notice that we don't have to add a callback or more commands, we can just create a Typer app that generates a single Click <code>Command</code>, as we don't need to include anything under the Typer app.</p> <p>Then we generate a Click object from our <code>typer.Typer</code> app (<code>typer_click_object</code>), and then we use the Click <code>cli</code> to include our Click object from our Typer app.</p> <p>In this case, the original Click app includes the Typer app.</p> <p>And then we call the original Click app, not the Typer app.</p> <p>Check it:</p> <pre><code>$ python main.py\n\n// We get our Typer app down there in the sub command\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  dropdb\n  initdb\n  sub     A single-command Typer sub app\n\n\n// Use the Click part\n$ python main.py initdb\n\nInitialized the database\n\n// And use the Typer part\n$ python main.py sub\n\nTyper is now below Click, the Click app is the top level\n</code></pre>"},{"location":"custom/overview/#about-click-decorators","title":"About Click decorators","text":"<p>Typer apps don't work with Click decorators directly.</p> <p>This is because Typer doesn't modify functions to add metadata or to convert them to another object like Click does.</p> <p>So, things like <code>@click.pass_context</code> won't work.</p> <p>Most of the functionality provided by decorators in Click has an alternative way of doing it in Typer.</p> <p>For example, to access the context, you can just declare a function parameter of type <code>typer.Context</code>.</p> <p>Tip</p> <p>You can read more about using the context in the docs: Commands: Using the Context{.internal-link target=_blank}</p> <p>But if you need to use something based on Click decorators, you can always generate a Click object using the methods described above, and use it as you would normally use Click.</p>"},{"location":"custom/request/","title":"VisionAI","text":"<p>Documentation for VisionAI toolkit.</p>"},{"location":"custom/request/#overview","title":"Overview","text":"<p>VisionAI provides a set of command line utilities for you to manage different Vision AI scenarios that have been pre-developed and pre-tested. VisionAI focuses on workplace health and safety models - and majority of the models you see here have been developed with that in mind.</p> <p>These are production-ready model trained from open-source and academic datasets. We are continuously working on new scenarios - and our current scenario repo consists of over 60 scenarios that are listed here. They are developed with the intent of being easy-to-use for business. The framework also supports a whole bunch of custom scenarios.</p>"},{"location":"custom/request/#install-visionai","title":"Install VisionAI","text":"<p>Install VisionAI application through <code>PyPI</code>. There are other options available for install - including a Docker container option. These are detailed in installation section.</p> <pre><code>$ pip install visionai\n---&gt; 100%\n\nSuccessfully installed visionai\n\n\u2728 You are all set to use visionai toolkit \u2728\n</code></pre>"},{"location":"custom/request/#deploy-to-azure","title":"Deploy to Azure","text":"<p>Deploy a fully configured and tested solution directly from Azure Marketplace. VisionAI runs computer vision models, most of which run orders of magnitude faster if executed on a GPU machine. Our Azure Marketplace offer VisionAI Community Edition is available through Azure Marketplace here (TODO). The community edition deploys a fully configured Virtual Machine with the recommended hardware and software options. Get more details here.</p> <p></p> <ul> <li>TODO: Point to ARM template that needs to be deployed (using these instructions and here is an example JSON file).</li> </ul>"},{"location":"custom/request/#list-available-scenarios","title":"List available Scenarios","text":"<p>VisionAI is organized in terms of scenarios. Consider each scenario as being a business use-case, that is solved by a combination of Machine Learning models and an inference algorithm. For example Warn me when max occupancy of this area exceeds 80 people is a business scenario, where as the People detection is an ML model.</p> <p>VisionAI supports 60 scenarios currently and more are being added continuously. Our current focus is on Workplace Safety scenarios. Please contact us if a scenario you need is not present in our repo and we will look into it.</p> <pre><code>$ visionai scenarios list\n\n------------------------------------------------\nPrivacy Suite\nblur-faces\nblur-text\n\nFire safety\nearly-smoke-and-fire-detection\nsmoking-and-vaping-detection\n\nPersonnel safety\nppe-detection\npfas-system-detection\nrailings-detection\n\nSuspicious activity\nshipping-activity-detection\nagressive-behaivior\n\n\nCompliance Policies\nmax-occupancy\n\nEquipment\nrust-and-corrosion-detection\n\nIR Camera\ntemperature-monitoring\n------------------------------------------------\n\n\u2728 More scenarios are added regularly \u2728\n</code></pre>"},{"location":"custom/request/#get-details-for-a-scenario","title":"Get details for a Scenario","text":"<p>You can get details about a scenario using <code>visionai scenario details</code> command. Specify the scenario you want additional details for. The details of a scenario include the dataset size, model accuracy metrics,</p> <pre><code>$ visionai scenario --name early-smoke-and-fire-detection details\n\n------------------------------------------------\nCategory: Fire safety\nScenario: early-smoke-and-fire-detection\nThis scenario has been trained on open-source datasets consisting of 126,293 images. The datasets images are primarily outdoors (70%), but do contain a good number of indoor images (30%). There is a ~50-50% mix of day vs night images. You can find more details about this scenario at visionify.ai/early-smoke-and-fire-detection.\n\n\nModel: smoke-and-fire-detection-1.0.1.pt\nModel size: 127MB\nModel type: Object Detection\nFramework: PyTorch\n\nModel performance:\nDataset size: 126,293 images\nAccuracy: 94.1%\nRecall: 93%\nF1-Score: 93.5%\n\nEvents:\nsmoke-detected  | Immediate\nfire-detected   | Immediate\n\nEvent examples:\n{\n    \"scenario\": \"smoke-and-fire-detection\",\n    \"event_name\": \"smoke-detected\",\n    \"event_details\": {\n        \"camera\": \"camera-01\",\n        \"date\": \"2023-01-04 11:05:02\",\n        \"confidence\": 0.92\n    }\n}\n------------------------------------------------\n</code></pre>"},{"location":"custom/request/#run-a-scenario","title":"Run a Scenario","text":"<p>Use <code>visionai run</code> command to run a scenario. In its simplest sense, you can run a single scenario on your web-cam. In a more complex use-case, you can specify a pipeline of scenarios, configure notification logic for each scenario, timings for each scenario etc.</p> <pre><code>$ visionai run --scenario early-smoke-and-fire-detection --camera OFFICE-01\n\nStarting early-smoke-and-fire-detection\n...\n</code></pre>"},{"location":"custom/request/#get-help-on-commands","title":"Get help on commands","text":"<p>You can get more help on any command by adding --help at the end of the command. For example, if you want to get details about pipeline commands, you can run the following commands.</p> <pre><code>$ visionai pipeline --help\n\n Usage: visionai pipeline [OPTIONS] COMMAND [ARGS]...\n\n Manage pipelines\n Pipeline is a sequence of preprocess routines and\n scenarios to be run on a given set of cameras. Each\n pipeline can be configured to run specific scenarios -\n each scenario with their own customizations for event\n notifications. This module provides robust methods for\n managing pipelines, showing their details, adding/remove\n cameras from pipelines and running a pipeline.\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 add-camera      Add a camera to a pipeline               \u2502\n\u2502 add-preprocess  Add a preprocess routine to a pipeline   \u2502\n\u2502 add-scenario    Add a scenario to a pipeline             \u2502\n\u2502 create          Create a named pipeline                  \u2502\n\u2502 remove-camera   Remove a camera from a pipeline          \u2502\n\u2502 reset           Reset the pipeline to original state.    \u2502\n\u2502 run             Run a pipeline of scenarios on given     \u2502\n\u2502                 cameras                                  \u2502\n\u2502 show            Show details of a pipeline               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n$ visionai pipeline add-scenario --help\n\n Usage: visionai pipeline add-scenario [OPTIONS]\n\n Add a scenario to a pipeline\n The order of the scenarios does not matter. All added\n scenarios are run in different threads. All scenarios are\n run after pre-processing stage is done.\n ``` Ex: visionai pipeline --name test_pipe add-scenario\n --name smoke-and-fire visionai pipeline --name test_pipe\n add-scenario --name ppe-detection visionai pipeline --name\n test_pipe run ```\n @arg pipeline - specify a named pipeline @arg scenario -\n specify name of the scenario to run\n @return None\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *  --pipeline        TEXT  pipeline name [default: None] \u2502\n\u2502                            [required]                    \u2502\n\u2502 *  --scenario        TEXT  scenario to add               \u2502\n\u2502                            [default: None]               \u2502\n\u2502                            [required]                    \u2502\n\u2502    --help                  Show this message and exit.   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"custom/request/#next-steps","title":"Next steps","text":"<p>Congratulations! You have successfully run the first scenario. Now go through Tutorials to learn about how to run multiple scnearios, how to configure each scenario for the events you need, how to set up the dependencies etc.</p> <p>Or you can also go through our scenarios page to explore the different scenarios available and their model details. If you have a need for a scenario to be implemented, do not hesitate to submit a request.</p>"},{"location":"custom/retraining/","title":"Retrain models","text":"<p>There are some cases where you might want to terminate a command at some point, and stop all subsequent execution.</p> <p>It could be that your code determined that the program completed successfully, or it could be an operation aborted.</p>"},{"location":"custom/retraining/#exit-a-cli-program","title":"<code>Exit</code> a CLI program","text":"<p>You can normally just let the code of your CLI program finish its execution, but in some scenarios, you might want to terminate at some point in the middle of it. And prevent any subsequent code to run.</p> <p>This doesn't have to mean that there's an error, just that nothing else needs to be executed.</p> <p>In that case, you can raise a <code>typer.Exit()</code> exception:</p> <pre><code>{!../docs_src/terminating/tutorial001.py!}\n</code></pre> <p>There are several things to see in this example.</p> <ul> <li>The CLI program is the function <code>main()</code>, not the others. This is the one that takes a CLI argument.</li> <li>The function <code>maybe_create_user()</code> can terminate the program by raising <code>typer.Exit()</code>.</li> <li>If the program is terminated by <code>maybe_create_user()</code> then <code>send_new_user_notification()</code> will never execute inside of <code>main()</code>.</li> </ul> <p>Check it:</p> <pre><code>$ python main.py Camila\n\nUser created: Camila\nNotification sent for new user: Camila\n\n// Try with an existing user\n$ python main.py rick\n\nThe user already exists\n\n// Notice that the notification code was never run, the second message is not printed\n</code></pre> <p>Tip</p> <p>Even though you are raising an exception, it doesn't necessarily mean there's an error.</p> <p>This is done with an exception because it works as an \"error\" and stops all execution.</p> <p>But then Typer (actually Click) catches it and just terminates the program normally.</p>"},{"location":"custom/retraining/#exit-with-an-error","title":"Exit with an error","text":"<p><code>typer.Exit()</code> takes an optional <code>code</code> parameter. By default, <code>code</code> is <code>0</code>, meaning there was no error.</p> <p>You can pass a <code>code</code> with a number other than <code>0</code> to tell the terminal that there was an error in the execution of the program:</p> <pre><code>{!../docs_src/terminating/tutorial002.py!}\n</code></pre> <p>Check it:</p> <pre><code>$ python main.py Camila\n\nNew user created: Camila\n\n// Print the result code of the last program executed\n$ echo $?\n\n0\n\n// Now make it exit with an error\n$ python main.py root\n\nThe root user is reserved\n\n// Print the result code of the last program executed\n$ echo $?\n\n1\n\n// 1 means there was an error, 0 means no errors.\n</code></pre> <p>Tip</p> <p>The error code might be used by other programs (for example a Bash script) that execute your CLI program.</p>"},{"location":"custom/retraining/#abort","title":"Abort","text":"<p>There's a special exception that you can use to \"abort\" a program.</p> <p>It works more or less the same as <code>typer.Exit()</code> but will print <code>\"Aborted!\"</code> to the screen and can be useful in certain cases later to make it explicit that the execution was aborted:</p> <pre><code>{!../docs_src/terminating/tutorial003.py!}\n</code></pre> <p>Check it:</p> <pre><code>$ python main.py Camila\n\nNew user created: Camila\n\n// Now make it exit with an error\n$ python main.py root\n\nThe root user is reserved\nAborted!\n</code></pre>"},{"location":"overview/azure-managed-app/","title":"Azure Managed App","text":"<p>You can use the normal <code>print()</code> to show information on the screen:</p> <pre><code>{!../docs_src/first_steps/tutorial001.py!}\n</code></pre> <p>It will show the output normally:</p> <pre><code>$ python main.py\n\nHello World\n</code></pre>"},{"location":"overview/azure-managed-app/#use-rich","title":"Use Rich","text":"<p>You can also display beautiful and more complex information using Rich.</p>"},{"location":"overview/azure-managed-app/#install-rich","title":"Install Rich","text":"<p>First, you need to install it:</p> <pre><code>// Rich comes with typer[all]\n$ pip install \"typer[all]\"\n---&gt; 100%\nSuccessfully installed typer rich\n\n// Alternatively, you can install Rich independently\n$ pip install rich\n---&gt; 100%\nSuccessfully installed rich\n</code></pre>"},{"location":"overview/azure-managed-app/#use-rich-print","title":"Use Rich <code>print</code>","text":"<p>For the simplest cases, you can just import <code>print</code> from <code>rich</code> and use it instead of the standard <code>print</code>:</p> <pre><code>{!../docs_src/printing/tutorial001.py!}\n</code></pre> <p>Just with that, Rich will be able to print your data with nice colors and structure:</p> <pre><code>$ python main.py\n\nHere's the data\n&lt;b&gt;{&lt;/b&gt;\n    &lt;font color=\"#A6E22E\"&gt;&amp;apos;name&amp;apos;&lt;/font&gt;: &lt;font color=\"#A6E22E\"&gt;&amp;apos;Rick&amp;apos;&lt;/font&gt;,\n    &lt;font color=\"#A6E22E\"&gt;&amp;apos;age&amp;apos;&lt;/font&gt;: &lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;42&lt;/b&gt;&lt;/font&gt;,\n    &lt;font color=\"#A6E22E\"&gt;&amp;apos;items&amp;apos;&lt;/font&gt;: &lt;b&gt;[&lt;/b&gt;\n        &lt;b&gt;{&lt;/b&gt;&lt;font color=\"#A6E22E\"&gt;&amp;apos;name&amp;apos;&lt;/font&gt;: &lt;font color=\"#A6E22E\"&gt;&amp;apos;Portal Gun&amp;apos;&lt;/font&gt;&lt;b&gt;}&lt;/b&gt;,\n        &lt;b&gt;{&lt;/b&gt;&lt;font color=\"#A6E22E\"&gt;&amp;apos;name&amp;apos;&lt;/font&gt;: &lt;font color=\"#A6E22E\"&gt;&amp;apos;Plumbus&amp;apos;&lt;/font&gt;&lt;b&gt;}&lt;/b&gt;\n    &lt;b&gt;]&lt;/b&gt;,\n    &lt;font color=\"#A6E22E\"&gt;&amp;apos;active&amp;apos;&lt;/font&gt;: &lt;font color=\"#A6E22E\"&gt;&lt;i&gt;True&lt;/i&gt;&lt;/font&gt;,\n    &lt;font color=\"#A6E22E\"&gt;&amp;apos;affiliation&amp;apos;&lt;/font&gt;: &lt;font color=\"#AE81FF\"&gt;&lt;i&gt;None&lt;/i&gt;&lt;/font&gt;\n&lt;b&gt;}&lt;/b&gt;\n</code></pre>"},{"location":"overview/azure-managed-app/#rich-markup","title":"Rich Markup","text":"<p>Rich also supports a custom markup syntax to set colors and styles, for example:</p> <pre><code>{!../docs_src/printing/tutorial002.py!}\n</code></pre> <pre><code>$ python main.py\n\n&lt;font color=\"#F92672\"&gt;&lt;b&gt;Alert!&lt;/b&gt;&lt;/font&gt; &lt;font color=\"#A6E22E\"&gt;Portal gun&lt;/font&gt; shooting! \ud83d\udca5\n</code></pre> <p>In this example you can see how to use font styles, colors, and even emojis.</p> <p>To learn more check out the Rich docs.</p>"},{"location":"overview/azure-managed-app/#rich-tables","title":"Rich Tables","text":"<p>The way Rich works internally is that it uses a <code>Console</code> object to display the information.</p> <p>When you call Rich's <code>print</code>, it automatically creates this object and uses it.</p> <p>But for advanced use cases, you could create a <code>Console</code> yourself.</p> <pre><code>{!../docs_src/printing/tutorial003.py!}\n</code></pre> <p>In this example, we create a <code>Console</code>, and a <code>Table</code>. And then we can add some rows to the table, and print it.</p> <p>If you run it, you will see a nicely formatted table:</p> <pre><code>$ python main.py\n\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503&lt;b&gt; Name  &lt;/b&gt;\u2503&lt;b&gt; Item       &lt;/b&gt;\u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 Rick  \u2502 Portal Gun \u2502\n\u2502 Morty \u2502 Plumbus    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Rich has many other features, as an example, you can check the docs for:</p> <ul> <li>Prompt</li> <li>Markdown</li> <li>Panel</li> <li>...and more.</li> </ul>"},{"location":"overview/azure-managed-app/#typer-and-rich","title":"Typer and Rich","text":"<p>If you are wondering what tool should be used for what, Typer is useful for structuring the command line application, with options, arguments, subcommands, data validation, etc.</p> <p>In general, Typer tends to be the entry point to your program, taking the first input from the user.</p> <p>Rich is useful for the parts that need to display information. Showing beautiful content on the screen.</p> <p>The best results for your command line application would be achieved combining both Typer and Rich.</p>"},{"location":"overview/azure-managed-app/#standard-output-and-standard-error","title":"\"Standard Output\" and \"Standard Error\"","text":"<p>The way printing works underneath is that the operating system (Linux, Windows, macOS) treats what we print as if our CLI program was writing text to a \"virtual file\" called \"standard output\".</p> <p>When our code \"prints\" things it is actually \"writing\" to this \"virtual file\" of \"standard output\".</p> <p>This might seem strange, but that's how the CLI program and the operating system interact with each other.</p> <p>And then the operating system shows on the screen whatever our CLI program \"wrote\" to that \"virtual file\" called \"standard output\".</p>"},{"location":"overview/azure-managed-app/#standard-error","title":"Standard Error","text":"<p>And there's another \"virtual file\" called \"standard error\" that is normally only used for errors.</p> <p>But we can also \"print\" to \"standard error\". And both are shown on the terminal to the users.</p> <p>Info</p> <p>If you use PowerShell it's quite possible that what you print to \"standard error\" won't be shown in the terminal.</p> <p>In PowerShell, to see \"standard error\" you would have to check the variable <code>$Error</code>.</p> <p>But it will work normally in Bash, Zsh, and Fish.</p>"},{"location":"overview/azure-managed-app/#printing-to-standard-error","title":"Printing to \"standard error\"","text":"<p>You can print to \"standard error\" creating a Rich <code>Console</code> with <code>stderr=True</code>.</p> <p>Tip</p> <p><code>stderr</code> is short for \"standard error\".</p> <p>Using <code>stderr=True</code> tells Rich that the output should be shown in \"standard error\".</p> <pre><code>{!../docs_src/printing/tutorial004.py!}\n</code></pre> <p>When you try it in the terminal, it will probably just look the same:</p> <pre><code>$ python main.py\n\nHere is something written to standard error\n</code></pre>"},{"location":"overview/azure-managed-app/#standard-input","title":"\"Standard Input\"","text":"<p>As a final detail, when you type text in your keyboard to your terminal, the operating system also considers it another \"virtual file\" that you are writing text to.</p> <p>This virtual file is called \"standard input\".</p>"},{"location":"overview/azure-managed-app/#what-is-this-for","title":"What is this for","text":"<p>Right now this probably seems quite useless \ud83e\udd37\u200d\u2642.</p> <p>But understanding that will come handy in the future, for example for autocompletion and testing.</p>"},{"location":"overview/azure-managed-app/#typer-echo","title":"Typer Echo","text":"<p>Warning</p> <p>In most of the cases, for displaying advanced information, it is recommended to use Rich.</p> <p>You can probably skip the rest of this section. \ud83c\udf89\ud83d\ude0e</p> <p>Typer also has a small utility <code>typer.echo()</code> to print information on the screen, it comes directly from Click. But normally you shouldn't need it.</p> <p>For the simplest cases, you can use the standard Python <code>print()</code>.</p> <p>And for the cases where you want to display data more beautifully, or more advanced content, you should use Rich instead.</p>"},{"location":"overview/azure-managed-app/#why-typerecho","title":"Why <code>typer.echo</code>","text":"<p><code>typer.echo()</code> (which is actually just <code>click.echo()</code>) applies some checks to try and convert binary data to strings, and other similar things.</p> <p>But in most of the cases you wouldn't need it, as in modern Python strings (<code>str</code>) already support and use Unicode, and you would rarely deal with pure <code>bytes</code> that you want to print on the screen.</p> <p>If you have some <code>bytes</code> objects, you would probably want to decode them intentionally and directly before trying to print them.</p> <p>And if you want to print data with colors and other features, you are much better off with the more advanced tools in Rich.</p> <p>Info</p> <p><code>typer.echo()</code> comes directly from Click, you can read more about it in Click's docs.</p>"},{"location":"overview/azure-managed-app/#color","title":"Color","text":"<p>Technical Details</p> <p>The way color works in terminals is by using some codes (ANSI escape sequences) as part of the text.</p> <p>So, a colored text is still just a <code>str</code>.</p> <p>Tip</p> <p>Again, you are much better off using Rich for this. \ud83d\ude0e</p> <p>You can create colored strings to output to the terminal with <code>typer.style()</code>, that gives you <code>str</code>s that you can then pass to <code>typer.echo()</code>:</p> <pre><code>{!../docs_src/printing/tutorial005.py!}\n</code></pre> <p>Tip</p> <p>The parameters <code>fg</code> and <code>bg</code> receive strings with the color names for the \"foreground\" and \"background\" colors. You could simply pass <code>fg=\"green\"</code> and <code>bg=\"red\"</code>.</p> <p>But Typer provides them all as variables like <code>typer.colors.GREEN</code> just so you can use autocompletion while selecting them.</p> <p>Check it:</p> python main.py everything is good python main.py --no-good everything is bad <p>You can pass these function arguments to <code>typer.style()</code>:</p> <ul> <li><code>fg</code>: the foreground color.</li> <li><code>bg</code>: the background color.</li> <li><code>bold</code>: enable or disable bold mode.</li> <li><code>dim</code>: enable or disable dim mode. This is badly supported.</li> <li><code>underline</code>: enable or disable underline.</li> <li><code>blink</code>: enable or disable blinking.</li> <li><code>reverse</code>: enable or disable inverse rendering (foreground becomes background and the other way round).</li> <li><code>reset</code>: by default a reset-all code is added at the end of the string which means that styles do not carry over.  This can be disabled to compose styles.</li> </ul> <p>Info</p> <p>You can read more about it in Click's docs about <code>style()</code></p>"},{"location":"overview/azure-managed-app/#typersecho-style-and-print","title":"<code>typer.secho()</code> - style and print","text":"<p>Tip</p> <p>In case you didn't see above, you are much better off using Rich for this. \ud83d\ude0e</p> <p>There's a shorter form to style and print at the same time with <code>typer.secho()</code> it's like <code>typer.echo()</code> but also adds style like <code>typer.style()</code>:</p> <pre><code>{!../docs_src/printing/tutorial006.py!}\n</code></pre> <p>Check it:</p> python main.py Camila Welcome here Camila"},{"location":"overview/cameras/","title":"Cameras","text":"<p>Warning</p> <p>This is a more advanced topic, if you are starting with Typer, feel free to skip it.</p> <p>It will be mostly useful for people that already work with Click and have questions around it.</p> <p>Typer is powered by Click. It does all the work underneath.</p> <p>Here is some more information related to using both together.</p>"},{"location":"overview/cameras/#a-single-app-with-both-click-and-typer","title":"A single app with both Click and Typer","text":"<p>If you already have a Click application and want to migrate to Typer, or to add some Typer components, you can get a Click <code>Command</code> from your Typer application and then use Click directly.</p>"},{"location":"overview/cameras/#how-click-works","title":"How Click works","text":"<p>Before knowing how to combine Click and Typer, let's first check a little about how Click works.</p>"},{"location":"overview/cameras/#click-command","title":"Click <code>Command</code>","text":"<p>Any Click application has an object of class <code>Command</code>. That's, more or less, the most basic Click object.</p> <p>A <code>Command</code> can have its own CLI arguments and CLI options, and it has a function that it calls.</p> <p>For example, in this Click app:</p> <pre><code>{!../docs_src/using_click/tutorial001.py!}\n</code></pre> <p>The original <code>hello</code> variable is converted by Click from a function to a <code>Command</code> object. And the original <code>hello</code> function is used by that <code>Command</code> internally, but it is no longer named <code>hello</code> (as <code>hello</code> is now a Click <code>Command</code>).</p>"},{"location":"overview/cameras/#click-group","title":"Click <code>Group</code>","text":"<p>Then Click also has a <code>Group</code> class, it inherits from <code>Command</code>. So, a <code>Group</code> object is also a <code>Command</code>.</p> <p>A <code>Group</code> can also have its own CLI arguments and CLI options.</p> <p>A <code>Group</code> can have subcommands of class <code>Command</code> or sub groups of class <code>Group</code> as well.</p> <p>And a <code>Group</code> can also have a function that it calls, right before calling the function for any specific subcommand.</p> <p>For example:</p> <pre><code>{!../docs_src/using_click/tutorial002.py!}\n</code></pre> <p>The <code>cli</code> variable is converted by Click from a function to a <code>Group</code> object. And the original <code>cli</code> function is used by that <code>Group</code> internally.</p> <p>Tip</p> <p>The original <code>cli</code> function would be the equivalent of a Typer Callback{.internal-link target=_blank}.</p> <p>Then the <code>cli</code> variable, that now is a <code>Group</code> object, is used to add sub-commands.</p>"},{"location":"overview/cameras/#how-typer-works","title":"How Typer works","text":"<p>Typer doesn't modify the functions. You create an explicit variable of class <code>typer.Typer</code> and use it to register those functions.</p> <p>And then, when you call the app, Typer goes and creates a Click <code>Command</code> (or <code>Group</code>), and then calls it.</p> <p>If your app only has one command, then when you call it, Typer creates a single Click <code>Command</code> object and calls it.</p> <p>But Typer creates a Click <code>Group</code> object if your app has any of:</p> <ul> <li>More than one command.</li> <li>A callback.</li> <li>Sub-Typer apps (sub commands).</li> </ul> <p>Tip</p> <p>If you want to learn more about this check the section One or Multiple Commands{.internal-link target=_blank}.</p>"},{"location":"overview/cameras/#combine-click-and-typer","title":"Combine Click and Typer","text":"<p>Typer uses an internal function <code>typer.main.get_command()</code> to generate a Click <code>Command</code> (or <code>Group</code>) from a <code>typer.Typer</code> object.</p> <p>You can use it directly, and use the Click object with other Click applications.</p>"},{"location":"overview/cameras/#including-a-click-app-in-a-typer-app","title":"Including a Click app in a Typer app","text":"<p>For example, you could have a Typer app, generate a Click <code>Group</code> from it, and then include other Click apps in it:</p> <pre><code>{!../docs_src/using_click/tutorial003.py!}\n</code></pre> <p>Notice that we add a callback that does nothing (only document the CLI program), to make sure Typer creates a Click <code>Group</code>. That way we can add sub-commands to that Click <code>Group</code>.</p> <p>Then we generate a Click object from our <code>typer.Typer</code> app (<code>typer_click_object</code>), and then we can include another Click object (<code>hello</code>) in this Click <code>Group</code>.</p> <p>And that way, our Typer app will have a subcommand <code>top</code> built with Typer, and a subcommand <code>hello</code> built with Click.</p> <p>Check it:</p> <pre><code>$ python main.py\n\n// Notice we have both subcommands, top and hello\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nError: Missing command.\n\n// Call the Typer part\n$ python main.py top\n\nThe Typer app is at the top level\n\n// Call the Click part\n$ python main.py hello --name Camila\n\nHello Camila!\n</code></pre>"},{"location":"overview/cameras/#including-a-typer-app-in-a-click-app","title":"Including a Typer app in a Click app","text":"<p>The same way, you can do the contrary and include a Typer sub app in a bigger Click app:</p> <pre><code>{!../docs_src/using_click/tutorial004.py!}\n</code></pre> <p>Notice that we don't have to add a callback or more commands, we can just create a Typer app that generates a single Click <code>Command</code>, as we don't need to include anything under the Typer app.</p> <p>Then we generate a Click object from our <code>typer.Typer</code> app (<code>typer_click_object</code>), and then we use the Click <code>cli</code> to include our Click object from our Typer app.</p> <p>In this case, the original Click app includes the Typer app.</p> <p>And then we call the original Click app, not the Typer app.</p> <p>Check it:</p> <pre><code>$ python main.py\n\n// We get our Typer app down there in the sub command\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  dropdb\n  initdb\n  sub     A single-command Typer sub app\n\n\n// Use the Click part\n$ python main.py initdb\n\nInitialized the database\n\n// And use the Typer part\n$ python main.py sub\n\nTyper is now below Click, the Click app is the top level\n</code></pre>"},{"location":"overview/cameras/#about-click-decorators","title":"About Click decorators","text":"<p>Typer apps don't work with Click decorators directly.</p> <p>This is because Typer doesn't modify functions to add metadata or to convert them to another object like Click does.</p> <p>So, things like <code>@click.pass_context</code> won't work.</p> <p>Most of the functionality provided by decorators in Click has an alternative way of doing it in Typer.</p> <p>For example, to access the context, you can just declare a function parameter of type <code>typer.Context</code>.</p> <p>Tip</p> <p>You can read more about using the context in the docs: Commands: Using the Context{.internal-link target=_blank}</p> <p>But if you need to use something based on Click decorators, you can always generate a Click object using the methods described above, and use it as you would normally use Click.</p>"},{"location":"overview/faqs/","title":"FAQs","text":"<p>When you create a CLI program with Typer you probably want to create your own Python package.</p> <p>That's what allows your users to install it and have it as an independent program that they can use in their terminal.</p> <p>And that's also required for shell auto completion to work (unless you use your program through Typer CLI{.internal-link target=_blank}).</p> <p>Nowadays, there are several ways and tools to create Python packages (what you install with <code>pip install something</code>).</p> <p>You might even have your favorite already.</p> <p>Here's a very opinionated, short guide, showing one of the alternative ways of creating a Python package with a Typer app, from scratch.</p> <p>Tip</p> <p>If you already have a favorite way of creating Python packages, feel free to skip this.</p>"},{"location":"overview/faqs/#prerequisites","title":"Prerequisites","text":"<p>For this guide we'll use Poetry.</p> <p>Poetry's docs are great, so go ahead, check them and install it.</p>"},{"location":"overview/faqs/#create-a-project","title":"Create a project","text":"<p>Let's say we want to create a CLI application called <code>portal-gun</code>.</p> <p>To make sure your package doesn't collide with the package created by someone else, we'll name it with a prefix of your name.</p> <p>So, if your name is Rick, we'll call it <code>rick-portal-gun</code>.</p> <p>Create a project with Poetry:</p> <pre><code>$ poetry new rick-portal-gun\n\nCreated package rick_portal_gun in rick-portal-gun\n\n// Enter the new project directory\ncd ./rick-portal-gun\n</code></pre>"},{"location":"overview/faqs/#dependencies-and-environment","title":"Dependencies and environment","text":"<p>Add <code>typer[all]</code> to your dependencies:</p> <pre><code>$ poetry add \"typer[all]\"\n\n// It creates a virtual environment for your project\nCreating virtualenv rick-portal-gun-w31dJa0b-py3.6 in /home/rick/.cache/pypoetry/virtualenvs\nUsing version ^0.1.0 for typer\n\nUpdating dependencies\nResolving dependencies... (1.2s)\n\nWriting lock file\n\n---&gt; 100%\n\nPackage operations: 15 installs, 0 updates, 0 removals\n\n  - Installing zipp (3.1.0)\n  - Installing importlib-metadata (1.5.0)\n  - Installing pyparsing (2.4.6)\n  - Installing six (1.14.0)\n  - Installing attrs (19.3.0)\n  - Installing click (7.1.1)\n  - Installing colorama (0.4.3)\n  - Installing more-itertools (8.2.0)\n  - Installing packaging (20.3)\n  - Installing pluggy (0.13.1)\n  - Installing py (1.8.1)\n  - Installing shellingham (1.3.2)\n  - Installing wcwidth (0.1.8)\n  - Installing pytest (5.4.1)\n  - Installing typer (0.0.11)\n\n// Activate that new virtual environment\n$ poetry shell\n\nSpawning shell within /home/rick/.cache/pypoetry/virtualenvs/rick-portal-gun-w31dJa0b-py3.6\n\n// Open an editor using this new environment, for example VS Code\n$ code ./\n</code></pre> <p>You can see that you have a generated project structure that looks like:</p> <pre><code>.\n\u251c\u2500\u2500 poetry.lock\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.rst\n\u251c\u2500\u2500 rick_portal_gun\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 test_rick_portal_gun.py\n</code></pre>"},{"location":"overview/faqs/#create-your-app","title":"Create your app","text":"<p>Now let's create an extremely simple Typer app.</p> <p>Create a file <code>rick_portal_gun/main.py</code> with:</p> <pre><code>import typer\n\n\napp = typer.Typer()\n\n\n@app.callback()\ndef callback():\n    \"\"\"\n    Awesome Portal Gun\n    \"\"\"\n\n\n@app.command()\ndef shoot():\n    \"\"\"\n    Shoot the portal gun\n    \"\"\"\n    typer.echo(\"Shooting portal gun\")\n\n\n@app.command()\ndef load():\n    \"\"\"\n    Load the portal gun\n    \"\"\"\n    typer.echo(\"Loading portal gun\")\n</code></pre> <p>Tip</p> <p>As we are creating an installable Python package, there's no need to add a section with <code>if __name__ == \"__main__\":</code>.</p>"},{"location":"overview/faqs/#modify-the-readme","title":"Modify the README","text":"<p>Let's change the README. By default it's a file <code>README.rst</code>.</p> <p>Let's change it to <code>README.md</code>. So, change the extension from <code>.rst</code> to <code>.md</code>.</p> <p>So that we can use Markdown instead of reStructuredText.</p> <p>And change the file to have something like:</p> <pre><code># Portal Gun\n\nThe awesome Portal Gun\n</code></pre>"},{"location":"overview/faqs/#modify-your-project-metadata","title":"Modify your project metadata","text":"<p>Edit your file <code>pyproject.toml</code>.</p> <p>It would look something like:</p> <pre><code>[tool.poetry]\nname = \"rick-portal-gun\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"Rick Sanchez &lt;rick@example.com&gt;\"]\n\n[tool.poetry.dependencies]\npython = \"^3.6\"\ntyper = {extras = [\"all\"], version = \"^0.1.0\"}\n\n[tool.poetry.dev-dependencies]\npytest = \"^5.2\"\n\n[build-system]\nrequires = [\"poetry&gt;=0.12\"]\nbuild-backend = \"poetry.masonry.api\"\n</code></pre> <p>We changed the default README, so let's make it use the new <code>README.md</code>.</p> <p>Add the line:</p> <pre><code>[tool.poetry]\nname = \"rick-portal-gun\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"Rick Sanchez &lt;rick@example.com&gt;\"]\nreadme = \"README.md\"\n\n[tool.poetry.dependencies]\npython = \"^3.6\"\ntyper = {extras = [\"all\"], version = \"^0.1.0\"}\n\n[tool.poetry.dev-dependencies]\npytest = \"^5.2\"\n\n[build-system]\nrequires = [\"poetry&gt;=0.12\"]\nbuild-backend = \"poetry.masonry.api\"\n</code></pre>"},{"location":"overview/faqs/#add-a-script","title":"Add a \"script\"","text":"<p>We are creating a Python package that can be installed with <code>pip install</code>.</p> <p>But we want it to provide a CLI program that can be executed in the shell.</p> <p>To do that, we add a configuration to the <code>pyproject.toml</code> in the section <code>[tool.poetry.scripts]</code>:</p> <pre><code>[tool.poetry]\nname = \"rick-portal-gun\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"Rick Sanchez &lt;rick@example.com&gt;\"]\nreadme = \"README.md\"\n\n[tool.poetry.scripts]\nrick-portal-gun = \"rick_portal_gun.main:app\"\n\n[tool.poetry.dependencies]\npython = \"^3.6\"\ntyper = {extras = [\"all\"], version = \"^0.1.0\"}\n\n[tool.poetry.dev-dependencies]\npytest = \"^5.2\"\n\n[build-system]\nrequires = [\"poetry&gt;=0.12\"]\nbuild-backend = \"poetry.masonry.api\"\n</code></pre> <p>Here's what that line means:</p> <p><code>rick-portal-gun</code>: will be the name of the CLI program. That's how we will call it in the terminal once it is installed. Like:</p> <pre><code>$ rick-portal-gun\n\n// Something happens here \u2728\n</code></pre> <p><code>rick_portal_gun.main</code>, in the part <code>\"rick_portal_gun.main:app\"</code>, with underscores, refers to the Python module to import. That's what someone would use in a section like:</p> <pre><code>from rick_portal_gun.main import # something goes here\n</code></pre> <p>The <code>app</code> in <code>\"rick_portal_gun.main:app\"</code> is the thing to import from the module, and to call as a function, like:</p> <pre><code>from rick_portal_gun.main import app\napp()\n</code></pre> <p>That config section tells Poetry that when this package is installed we want it to create a command line program called <code>rick-portal-gun</code>.</p> <p>And that the object to call (like a function) is the one in the variable <code>app</code> inside of the module <code>rick_portal_gun.main</code>.</p>"},{"location":"overview/faqs/#install-your-package","title":"Install your package","text":"<p>That's what we need to create a package.</p> <p>You can now install it:</p> <pre><code>$ poetry install\n\nInstalling dependencies from lock file\n\nNo dependencies to install or update\n\n  - Installing rick-portal-gun (0.1.0)\n</code></pre>"},{"location":"overview/faqs/#try-your-cli-program","title":"Try your CLI program","text":"<p>Your package is installed in the environment created by Poetry, but you can already use it.</p> <pre><code>// You can use the which program to check which rick-portal-gun program is available (if any)\n$ which rick-portal-gun\n\n// You get the one from your environment\n/home/rick/.cache/pypoetry/virtualenvs/rick-portal-gun-w31dJa0b-py3.6/bin/rick-portal-gun\n\n// Try it\n$ rick-portal-gun\n\n// You get all the standard help\nUsage: rick-portal-gun [OPTIONS] COMMAND [ARGS]...\n\n  Awesome Portal Gun\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n\n  --help                Show this message and exit.\n\nCommands:\n  load   Load the portal gun\n  shoot  Shoot the portal gun\n</code></pre>"},{"location":"overview/faqs/#create-a-wheel-package","title":"Create a wheel package","text":"<p>Python packages have a standard format called a \"wheel\". It's a file that ends in <code>.whl</code>.</p> <p>You can create a wheel with Poetry:</p> <pre><code>$ poetry build\n\nBuilding rick-portal-gun (0.1.0)\n - Building sdist\n - Built rick-portal-gun-0.1.0.tar.gz\n\n - Building wheel\n - Built rick_portal_gun-0.1.0-py3-none-any.whl\n</code></pre> <p>After that, if you check in your project directory, you should now have a couple of extra files at <code>./dist/</code>:</p> <pre><code>.\n\u251c\u2500\u2500 dist\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rick_portal_gun-0.1.0-py3-none-any.whl\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 rick-portal-gun-0.1.0.tar.gz\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 ...\n</code></pre> <p>The <code>.whl</code> is the wheel file. You can send that wheel file to anyone and they can use it to install your program (we'll see how to upload it to PyPI in a bit).</p>"},{"location":"overview/faqs/#test-your-wheel-package","title":"Test your wheel package","text":"<p>Now you can open another terminal and install that package from the file for your own user with:</p> <pre><code>$ pip install --user /home/rock/code/rick-portal-gun/dist/rick_portal_gun-0.1.0-py3-none-any.whl\n\n---&gt; 100%\n</code></pre> <p>Warning</p> <p>The <code>--user</code> is important, that ensures you install it in your user's directory and not in the global system.</p> <p>If you installed it in the global system (e.g. with <code>sudo</code>) you could install a version of a library (e.g. a sub-dependency) that is incompatible with your system.</p> <p>Tip</p> <p>Bonus points if you use <code>pipx</code> to install it while keeping an isolated environment for your Python CLI programs \ud83d\ude80</p> <p>Now you have your CLI program installed. And you can use it freely:</p> <pre><code>$ rick-portal-gun shoot\n\n// It works \ud83c\udf89\nShooting portal gun\n</code></pre> <p>Having it installed globally (and not in a single environment), you can now install completion globally for it:</p> <pre><code>$ rick-portal-gun --install-completion\n\nzsh completion installed in /home/user/.zshrc.\nCompletion will take effect once you restart the terminal.\n</code></pre> <p>Tip</p> <p>If you want to remove completion you can just delete the added line in that file.</p> <p>And after you restart the terminal you will get completion for your new CLI program:</p> <pre><code>$ rick-portal-gun [TAB][TAB]\n\n// You get completion for your CLI program \u2728\nload   -- Load the portal gun\nshoot  -- Shoot the portal gun\n</code></pre>"},{"location":"overview/faqs/#support-python-m-optional","title":"Support <code>python -m</code> (optional)","text":"<p>You may have seen that you can call many Python modules as scripts with <code>python -m some-module</code>.</p> <p>For example, one way to call <code>pip</code> is:</p> <pre><code>$ pip install fastapi\n</code></pre> <p>But you can also call Python with the <code>-m</code> CLI Option and pass a module for it to execute as if it was a script, like:</p> <pre><code>$ python -m pip install fastapi\n</code></pre> <p>Here we pass <code>pip</code> as the value for <code>-m</code>, so, Python will execute the module <code>pip</code> as if it was a script. And then it will pass the rest of the CLI Parameters (<code>install fastapi</code>) to it.</p> <p>These two are more or less equivalent, the <code>install fastapi</code> will be passed to <code>pip</code>.</p> <p>Tip</p> <p>In the case of <code>pip</code>, in many occasions it's actually recommended that you run it with <code>python -m</code>, because if you create a virtual environment with its own <code>python</code>, that will ensure that you use the <code>pip</code> from that environment.</p>"},{"location":"overview/faqs/#add-a-__main__py","title":"Add a <code>__main__.py</code>","text":"<p>You can support that same style of calling the package/module for your own package, simply by adding a file <code>__main__.py</code>.</p> <p>Python will look for that file and execute it.</p> <p>The file would live right beside <code>__init__.py</code>:</p> <pre><code>.\n\u251c\u2500\u2500 poetry.lock\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.rst\n\u251c\u2500\u2500 rick_portal_gun\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 __main__.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 test_rick_portal_gun.py\n</code></pre> <p>No other file has to import it, you don't have to reference it in your <code>pyproject.toml</code> or anything else, it just works by default, as it is standard Python behavior.</p> <p>Then in that file you can execute your Typer program:</p> <pre><code>from .main import app\napp()\n</code></pre> <p>Now, after installing your package, if you call it with <code>python -m</code> it will work (for the main part):</p> <pre><code>$ python -m rick_portal_gun\n\nUsage: __main__.py [OPTIONS] COMMAND [ARGS]...\n\n  Awesome Portal Gun\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n\n  --help                Show this message and exit.\n\nCommands:\n  load   Load the portal gun\n  shoot  Shoot the portal gun\n</code></pre> <p>Tip</p> <p>Notice that you have to pass the importable version of the package name, so <code>rick_portal_gun</code> instead of <code>rick-portal-gun</code>.</p> <p>That works! \ud83d\ude80 Sort of... \ud83e\udd14</p> <p>See the <code>__main__.py</code> in the help instead of <code>rick-portal-gun</code>? We'll fix that next.</p>"},{"location":"overview/faqs/#set-a-program-name-in-__main__py","title":"Set a program name in <code>__main__.py</code>","text":"<p>We are setting the program name in the file <code>pyproject.toml</code> in the line like:</p> <pre><code>[tool.poetry.scripts]\nrick-portal-gun = \"rick_portal_gun.main:app\"\n</code></pre> <p>But when Python runs our package as a script with <code>python -m</code>, it doesn't have the information of the program name.</p> <p>So, to fix the help text to use the correct program name when called with <code>python -m</code>, we can pass it to the app in <code>__main__.py</code>:</p> <pre><code>from .main import app\napp(prog_name=\"rick-portal-gun\")\n</code></pre> <p>Tip</p> <p>You can pass all the arguments and keyword arguments you could pass to a Click application, including <code>prog_name</code>.</p> <pre><code>$ python -m rick_portal_gun\n\nUsage: rick-portal-gun [OPTIONS] COMMAND [ARGS]...\n\n  Awesome Portal Gun\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n\n  --help                Show this message and exit.\n\nCommands:\n  load   Load the portal gun\n  shoot  Shoot the portal gun\n</code></pre> <p>Great! That works correctly! \ud83c\udf89 \u2705</p> <p>Notice that now it uses <code>rick-portal-gun</code> instead of <code>__main__.py</code> in the help.</p>"},{"location":"overview/faqs/#autocompletion-and-python-m","title":"Autocompletion and <code>python -m</code>","text":"<p>Have in mind that TAB completion (shell auto-completion) won't work when using <code>python -m</code>.</p> <p>Auto-completion depends on the name of the program called, it's tied to each specific program name.</p> <p>So, to have shell completion for <code>rick-portal-gun</code> you would have to call it directly:</p> <pre><code>$ rick-portal-gun [TAB][TAB]\n</code></pre> <p>But you can still support <code>python -m</code> for the cases where it's useful.</p>"},{"location":"overview/faqs/#publish-to-pypi-optional","title":"Publish to PyPI (optional)","text":"<p>You can publish that new package to PyPI to make it public, so others can install it easily.</p> <p>So, go ahead and create an account there (it's free).</p>"},{"location":"overview/faqs/#pypi-api-token","title":"PyPI API token","text":"<p>To do it, you first need to configure a PyPI auth token.</p> <p>Login to PyPI.</p> <p>And then go to https://pypi.org/manage/account/token/ to create a new token.</p> <p>Let's say your new API token is:</p> <pre><code>pypi-wubalubadubdub-deadbeef1234\n</code></pre> <p>Now configure Poetry to use this token with the command <code>poetry config pypi-token.pypi</code>:</p> <pre><code>$ poetry config pypi-token.pypi pypi-wubalubadubdub-deadbeef1234\n// It won't show any output, but it's already configured\n</code></pre>"},{"location":"overview/faqs/#publish-to-pypi","title":"Publish to PyPI","text":"<p>Now you can publish your package with Poetry.</p> <p>You could build the package (as we did above) and then publish later, or you could tell poetry to build it before publishing in one go:</p> <pre><code>$ poetry publish --build\n\n# There are 2 files ready for publishing. Build anyway? (yes/no) [no] $ yes\n\n---&gt; 100%\n\nBuilding rick-portal-gun (0.1.0)\n - Building sdist\n - Built rick-portal-gun-0.1.0.tar.gz\n\n - Building wheel\n - Built rick_portal_gun-0.1.0-py3-none-any.whl\n\nPublishing rick-portal-gun (0.1.0) to PyPI\n - Uploading rick-portal-gun-0.1.0.tar.gz 100%\n - Uploading rick_portal_gun-0.1.0-py3-none-any.whl 100%\n</code></pre> <p>Now you can go to PyPI and check your projects at https://pypi.org/manage/projects/.</p> <p>You should now see your new \"rick-portal-gun\" package.</p>"},{"location":"overview/faqs/#install-from-pypi","title":"Install from PyPI","text":"<p>Now to see that we can install it form PyPI, open another terminal, and uninstall the currently installed package.</p> <pre><code>$ pip uninstall rick-portal-gun\n\nFound existing installation: rick-portal-gun 0.1.0\nUninstalling rick-portal-gun-0.1.0:\n  Would remove:\n    /home/user/.local/bin/rick-portal-gun\n    /home/user/.local/lib/python3.6/site-packages/rick_portal_gun-0.1.0.dist-info/*\n    /home/user/.local/lib/python3.6/site-packages/rick_portal_gun/*\n# Proceed (y/n)? $ y\n    Successfully uninstalled rick-portal-gun-0.1.0\n</code></pre> <p>And now install it again, but this time using just the name, so that <code>pip</code> pulls it from PyPI:</p> <pre><code>$ pip install --user rick-portal-gun\n\n// Notice that it says \"Downloading\" \ud83d\ude80\nCollecting rick-portal-gun\n  Downloading rick_portal_gun-0.1.0-py3-none-any.whl (1.8 kB)\nRequirement already satisfied: typer[all]&lt;0.0.12,&gt;=0.0.11 in ./.local/lib/python3.6/site-packages (from rick-portal-gun) (0.0.11)\nRequirement already satisfied: click&lt;7.2.0,&gt;=7.1.1 in ./anaconda3/lib/python3.6/site-packages (from typer[all]&lt;0.0.12,&gt;=0.0.11-&gt;rick-portal-gun) (7.1.1)\nRequirement already satisfied: colorama; extra == \"all\" in ./anaconda3/lib/python3.6/site-packages (from typer[all]&lt;0.0.12,&gt;=0.0.11-&gt;rick-portal-gun) (0.4.3)\nRequirement already satisfied: shellingham; extra == \"all\" in ./anaconda3/lib/python3.6/site-packages (from typer[all]&lt;0.0.12,&gt;=0.0.11-&gt;rick-portal-gun) (1.3.1)\nInstalling collected packages: rick-portal-gun\nSuccessfully installed rick-portal-gun-0.1.0\n</code></pre> <p>And now test the newly installed package from PyPI:</p> <pre><code>$ rick-portal-gun load\n\n// It works! \ud83c\udf89\nLoading portal gun\n</code></pre>"},{"location":"overview/faqs/#generate-docs-with-typer-cli-optional","title":"Generate docs with Typer CLI (optional)","text":"<p>You can install and use Typer CLI{.internal-link target=_blank} to generate docs for your package.</p> <p>After installing it, you can use it to generate a new <code>README.md</code>:</p> <pre><code>$ typer rick_portal_gun.main utils docs --output README.md --name rick-portal-gun\n\nDocs saved to: README.md\n</code></pre> <p>You just have to pass it the module to import (<code>rick_portal_gun.main</code>) and it will detect the <code>typer.Typer</code> app automatically.</p> <p>By specifying the <code>--name</code> of the program it will be able to use it while generating the docs.</p>"},{"location":"overview/faqs/#publish-a-new-version-with-the-docs","title":"Publish a new version with the docs","text":"<p>Now you can publish a new version with the updated docs.</p> <p>For that you need to first increase the version in <code>pyproject.toml</code>:</p> <pre><code>[tool.poetry]\nname = \"rick-portal-gun\"\nversion = \"0.2.0\"\ndescription = \"\"\nauthors = [\"Rick Sanchez &lt;rick@example.com&gt;\"]\nreadme = \"README.md\"\n\n[tool.poetry.scripts]\nrick-portal-gun = \"rick_portal_gun.main:app\"\n\n[tool.poetry.dependencies]\npython = \"^3.6\"\ntyper = {extras = [\"all\"], version = \"^0.1.0\"}\n\n[tool.poetry.dev-dependencies]\npytest = \"^5.2\"\n\n[build-system]\nrequires = [\"poetry&gt;=0.12\"]\nbuild-backend = \"poetry.masonry.api\"\n</code></pre> <p>And in the file <code>rick_portal_gun/__init__.py</code>:</p> <pre><code>__version__ = '0.2.0'\n</code></pre> <p>And then build and publish again:</p> <pre><code>$ poetry publish --build\n\n---&gt; 100%\n\nBuilding rick-portal-gun (0.2.0)\n - Building sdist\n - Built rick-portal-gun-0.2.0.tar.gz\n\n - Building wheel\n - Built rick_portal_gun-0.2.0-py3-none-any.whl\n\nPublishing rick-portal-gun (0.2.0) to PyPI\n - Uploading rick-portal-gun-0.2.0.tar.gz 100%\n - Uploading rick_portal_gun-0.2.0-py3-none-any.whl 100%\n</code></pre> <p>And now you can go to PyPI, to the project page, and reload it, and it will now have your new generated docs.</p>"},{"location":"overview/faqs/#whats-next","title":"What's next","text":"<p>This is a very simple guide. You could add many more steps.</p> <p>For example, you should use Git, the version control system, to save your code.</p> <p>You can add a lot of extra metadata to your <code>pyproject.toml</code>, check the docs for Poetry: Libraries.</p> <p>You could use <code>pipx</code> to manage your installed CLI Python programs in isolated environments.</p> <p>Maybe use automatic formatting with Black.</p> <p>You'll probably want to publish your code as open source to GitHub.</p> <p>And then you could integrate a CI tool to run your tests and deploy your package automatically.</p> <p>And there's a long etc. But now you have the basics and you can continue on your own \ud83d\ude80.</p>"},{"location":"overview/how-it-works/","title":"How it works","text":""},{"location":"overview/how-it-works/#how-it-works","title":"How it works","text":"<p>The simplest way to get your hands on VisionAI application is through install it through PyPI.</p> <pre><code>pip install visionai\n</code></pre> <p>This should install all the depdendencies. Some of the dependencies are big in size (PyTorch, Docker, OpenCV etc) - so please wait for a few minutes before the installation completes.</p> <p>Once it is installed - you can test it out.</p> <pre><code>$ visionai --help\n\n\n Usage: visionai [OPTIONS] COMMAND [ARGS]...\n\n VisionAI Toolkit\n VisionAI tookit provides a large number of ready-to-deploy scenarios built\n using latest computer vision frameworks. Supports many of the common\n workplace health and safety use-cases.\n Start by exploring scenarios through visionai scenario list command. After\n that, you can create a pipeline through the pipeline commands. Once a\n pipeline is configured, you can run the pipeline on the any number of\n cameras.\n Running the toolkit does assume a NVIDIA GPU powered machine for efficient\n performance. Please see the system requirements on the documentation.\n You can instead opt to install it through Azure Managed VM, with\n preconfigured machines &amp; recommended hardware support. You can find\n information about this on our documentation website.\n Visit https://docs.visionify.ai for more details.\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --verbose                                                                \u2502\n\u2502 --version                                                                \u2502\n\u2502 --install-completion          Install completion for the current shell.  \u2502\n\u2502 --show-completion             Show completion for the current shell, to  \u2502\n\u2502                               copy it or customize the installation.     \u2502\n\u2502 --help                        Show this message and exit.                \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 auth              Authorization (logging in/out)                         \u2502\n\u2502 camera            Manage cameras                                         \u2502\n\u2502 device            Manage device features                                 \u2502\n\u2502 models            Serve models                                           \u2502\n\u2502 pipeline          Manage pipelines                                       \u2502\n\u2502 scenario          Manage scenarios                                       \u2502\n\u2502 web               Web functions                                          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>...but this program is still not very useful. Let's extend it.</p>"},{"location":"overview/how-it-works/#what-is-a-cli-argument","title":"What is a CLI argument","text":"<p>Here we will use the word CLI argument to refer to CLI parameters passed in some specific order to the CLI application. By default, they are required.</p> <p>If you go to your terminal and type:</p> <pre><code>$ ls ./myproject\n\nfirst-steps.md  intro.md\n</code></pre> <p><code>ls</code> will show the contents of the directory <code>./myproject</code>.</p> <ul> <li><code>ls</code> is the program (or \"command\", \"CLI app\").</li> <li><code>./myproject</code> is a CLI argument, in this case it refers to the path of a directory.</li> </ul> <p>They are a bit different from CLI options that you will see later below.</p>"},{"location":"overview/how-it-works/#add-a-cli-argument","title":"Add a CLI argument","text":"<p>Update the previous example with an argument <code>name</code>:</p> <pre><code>{!../docs_src/first_steps/tutorial002.py!}\n</code></pre> <pre><code>$ python main.py\n\n// If you run it without the argument, it shows a nice error\n&lt;font color=\"#F4BF75\"&gt;Usage: &lt;/font&gt;main.py [OPTIONS] NAME\n&lt;font color=\"#A5A5A1\"&gt;Try &lt;/font&gt;&lt;font color=\"#44919F\"&gt;&amp;apos;main.py &lt;/font&gt;&lt;font color=\"#44919F\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;&lt;font color=\"#44919F\"&gt;&amp;apos;&lt;/font&gt;&lt;font color=\"#A5A5A1\"&gt; for help.&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u256d\u2500 Error \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; Missing argument &amp;apos;NAME&amp;apos;.                          &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n\n// Now pass that NAME CLI argument\n$ python main.py Camila\n\nHello Camila\n\n// Here \"Camila\" is the CLI argument\n\n// To pass a name with spaces for the same CLI argument, use quotes\n$ python main.py \"Camila Guti\u00e9rrez\"\n\nHello Camila Guti\u00e9rrez\n</code></pre> <p>Tip</p> <p>If you need to pass a single value that contains spaces to a CLI argument, use quotes (<code>\"</code>) around it.</p>"},{"location":"overview/how-it-works/#two-cli-arguments","title":"Two CLI arguments","text":"<p>Now let's say we want to have the name and last name separated.</p> <p>So, extend that to have 2 arguments, <code>name</code> and <code>lastname</code>:</p> <pre><code>{!../docs_src/first_steps/tutorial003.py!}\n</code></pre> <pre><code>// Check the main --help\n$ python main.py --help\n\n&lt;font color=\"#F4BF75\"&gt;Usage: &lt;/font&gt;main.py [OPTIONS] NAME\n&lt;font color=\"#A5A5A1\"&gt;Try &lt;/font&gt;&lt;font color=\"#44919F\"&gt;&amp;apos;main.py &lt;/font&gt;&lt;font color=\"#44919F\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;&lt;font color=\"#44919F\"&gt;&amp;apos;&lt;/font&gt;&lt;font color=\"#A5A5A1\"&gt; for help.&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u256d\u2500 Error \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; Missing argument &amp;apos;NAME&amp;apos;.                          &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n\n&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;typer&lt;/b&gt;&lt;/font&gt; on &lt;font color=\"#AE81FF\"&gt;&lt;b&gt;\ue0a0 richify&lt;/b&gt;&lt;/font&gt; &lt;font color=\"#F92672\"&gt;&lt;b&gt;[\u00bb!?] &lt;/b&gt;&lt;/font&gt;via &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;\ud83d\udc0d v3.7.5 (env3.7)&lt;/b&gt;&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;&lt;b&gt;\u276f&lt;/b&gt;&lt;/font&gt; &lt;font color=\"#A6E22E\"&gt;python&lt;/font&gt; &lt;u style=\"text-decoration-style:single\"&gt;main.py&lt;/u&gt;\n&lt;font color=\"#F4BF75\"&gt;Usage: &lt;/font&gt;main.py [OPTIONS] NAME LASTNAME\n&lt;font color=\"#A5A5A1\"&gt;Try &lt;/font&gt;&lt;font color=\"#44919F\"&gt;&amp;apos;main.py &lt;/font&gt;&lt;font color=\"#44919F\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;&lt;font color=\"#44919F\"&gt;&amp;apos;&lt;/font&gt;&lt;font color=\"#A5A5A1\"&gt; for help.&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u256d\u2500 Error \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; Missing argument &amp;apos;NAME&amp;apos;.                          &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n\n// There are now 2 CLI arguments, name and lastname\n\n// Now pass a single name argument\n$ python main.py Camila\n\n&lt;font color=\"#F4BF75\"&gt;Usage: &lt;/font&gt;main.py [OPTIONS] NAME LASTNAME\n&lt;font color=\"#A5A5A1\"&gt;Try &lt;/font&gt;&lt;font color=\"#44919F\"&gt;&amp;apos;main.py &lt;/font&gt;&lt;font color=\"#44919F\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;&lt;font color=\"#44919F\"&gt;&amp;apos;&lt;/font&gt;&lt;font color=\"#A5A5A1\"&gt; for help.&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u256d\u2500 Error \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; Missing argument &amp;apos;LASTNAME&amp;apos;.                      &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n\n// These 2 arguments are required, so, pass both:\n$ python main.py Camila Guti\u00e9rrez\n\nHello Camila Guti\u00e9rrez\n</code></pre> <p>Tip</p> <p>Notice that the order is important. The last name has to go after the first name.</p> <p>If you called it with:</p> <pre><code>$ python main.py Guti\u00e9rrez Camila\n</code></pre> <p>your app wouldn't have a way to know which is the <code>name</code> and which the <code>lastname</code>. It expects the first CLI argument to be the <code>name</code> and the second CLI argument to be the <code>lastname</code>.</p>"},{"location":"overview/how-it-works/#what-is-a-cli-option","title":"What is a CLI option","text":"<p>Here we will use the word CLI option to refer to CLI parameters passed to the CLI application with a specific name. For example, if you go to your terminal and type:</p> <pre><code>$ ls ./myproject --size\n\n12 first-steps.md   4 intro.md\n</code></pre> <p><code>ls</code> will show the contents of the directory <code>./myproject</code> with their <code>size</code>.</p> <ul> <li><code>ls</code> is the program (or \"command\", \"CLI app\").</li> <li><code>./myproject</code> is a CLI argument.</li> <li><code>--size</code> is an optional CLI option.</li> </ul> <p>The program knows it has to show the size because it sees <code>--size</code>, not because of the order.</p> <p>A CLI option like <code>--size</code> doesn't depend on the order like a CLI argument.</p> <p>So, if you put the <code>--size</code> before the CLI argument, it still works (in fact, that's the most common way of doing it):</p> <pre><code>$ ls --size ./myproject\n\n12 first-steps.md   4 intro.md\n</code></pre> <p>The main visual difference between a CLI option and a CLI argument is that the CLI option has <code>--</code> prepended to the name, like in \"<code>--size</code>\".</p> <p>A CLI option doesn't depend on the order because it has a predefined name (here it's <code>--size</code>). This is because the CLI app is looking specifically for a literal <code>--size</code> parameter (also known as \"flag\" or \"switch\"), with that specific \"name\" (here the specific name is \"<code>--size</code>\"). The CLI app will check if you typed it or not, it will be actively looking for <code>--size</code> even if you didn't type it (to check if it's there or not).</p> <p>In contrast, the CLI app is not actively looking for the CLI argument with a text \"<code>./myproject</code>\", it has no way to know if you would type <code>./myproject</code> or <code>./my-super-awesome-project</code> or anything else. It's just waiting to get whatever you give it. The only way to know that you refer to a specific CLI argument is because of the order. The same way that it knows that the first CLI argument was the <code>name</code> and the second was the <code>lastname</code>, but if you mixed the order, it wouldn't be able to handle it.</p> <p>Instead, with a CLI option, the order doesn't matter.</p> <p>Also, by default, a CLI option is optional (not required).</p> <p>So, by default:</p> <ul> <li>A CLI argument is required</li> <li>A CLI option is optional</li> </ul> <p>But the required and optional defaults can be changed.</p> <p>So, the main and most important difference is that:</p> <ul> <li>CLI options start with <code>--</code> and don't depend on the order</li> <li>CLI arguments depend on the sequence order</li> </ul> <p>Tip</p> <p>In this example above the CLI option <code>--size</code> is just a \"flag\" or \"switch\" that will contain a boolean value, <code>True</code> or <code>False</code>, depending on if it was added to the command or not.</p> <p>This one doesn't receive any values. But CLI options can also receive values like CLI arguments. You'll see how later.</p>"},{"location":"overview/how-it-works/#add-one-cli-option","title":"Add one CLI option","text":"<p>Now add a <code>--formal</code> CLI option:</p> <pre><code>{!../docs_src/first_steps/tutorial004.py!}\n</code></pre> <p>Here <code>formal</code> is a <code>bool</code> that is <code>False</code> by default.</p> <pre><code>// Get the help\n$ python main.py --help\n\n&lt;b&gt; &lt;/b&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;Usage: &lt;/b&gt;&lt;/font&gt;&lt;b&gt;main.py [OPTIONS] NAME LASTNAME                            &lt;/b&gt;\n&lt;b&gt;                                                                   &lt;/b&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#F92672\"&gt;*&lt;/font&gt;    name          &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;TEXT&lt;/b&gt;&lt;/font&gt;  [default: None] &lt;font color=\"#A6194C\"&gt;[required]&lt;/font&gt;             \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#F92672\"&gt;*&lt;/font&gt;    lastname      &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;TEXT&lt;/b&gt;&lt;/font&gt;  [default: None] &lt;font color=\"#A6194C\"&gt;[required]&lt;/font&gt;             \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--formal&lt;/b&gt;&lt;/font&gt;                &lt;font color=\"#AE81FF\"&gt;&lt;b&gt;--no-formal&lt;/b&gt;&lt;/font&gt;      [default: no-formal]   \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--install-completion&lt;/b&gt;&lt;/font&gt;                     Install completion for \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                                          the current shell.     \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--show-completion&lt;/b&gt;&lt;/font&gt;                        Show completion for    \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                                          the current shell, to  \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502                                          copy it or customize   \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502                                          the installation.      \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;                                   Show this message and  \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                                          exit.                  \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n</code></pre> <p>Tip</p> <p>Notice that it automatically creates a <code>--formal</code> and a <code>--no-formal</code> because it detected that <code>formal</code> is a <code>bool</code>.</p> <p>Now call it normally:</p> <pre><code>$ python main.py Camila Guti\u00e9rrez\n\nHello Camila Guti\u00e9rrez\n\n// But if you pass --formal\n$ python main.py Camila Guti\u00e9rrez --formal\n\nGood day Ms. Camila Guti\u00e9rrez.\n\n// And as --formal is a CLI option you can put it anywhere in this command\n$ python main.py Camila --formal Guti\u00e9rrez\n\nGood day Ms. Camila Guti\u00e9rrez.\n\n$ python main.py --formal Camila Guti\u00e9rrez\n\nGood day Ms. Camila Guti\u00e9rrez.\n</code></pre>"},{"location":"overview/how-it-works/#a-cli-option-with-a-value","title":"A CLI option with a value","text":"<p>To convert the <code>lastname</code> from a CLI argument to a CLI option, give it a default value of <code>\"\"</code>:</p> <pre><code>{!../docs_src/first_steps/tutorial005.py!}\n</code></pre> <p>As <code>lastname</code> now has a default value of <code>\"\"</code> (an empty string) it is no longer required in the function, and Typer will now by default make it an optional CLI option.</p> <pre><code>$ python main.py --help\n\n&lt;b&gt; &lt;/b&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;Usage: &lt;/b&gt;&lt;/font&gt;&lt;b&gt;main.py [OPTIONS] NAME                                       &lt;/b&gt;\n&lt;b&gt;                                                                     &lt;/b&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#F92672\"&gt;*&lt;/font&gt;    name      &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;TEXT&lt;/b&gt;&lt;/font&gt;  [default: None] &lt;font color=\"#A6194C\"&gt;[required]&lt;/font&gt;                   \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--lastname&lt;/b&gt;&lt;/font&gt;                             &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;TEXT&lt;/b&gt;&lt;/font&gt;                       \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--formal&lt;/b&gt;&lt;/font&gt;                &lt;font color=\"#AE81FF\"&gt;&lt;b&gt;--no-formal&lt;/b&gt;&lt;/font&gt;    &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;    &lt;/b&gt;&lt;/font&gt;  [default: no-formal] \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--install-completion&lt;/b&gt;&lt;/font&gt;                   &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;    &lt;/b&gt;&lt;/font&gt;  Install completion   \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                                              for the current      \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502                                              shell.               \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--show-completion&lt;/b&gt;&lt;/font&gt;                      &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;    &lt;/b&gt;&lt;/font&gt;  Show completion for  \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                                              the current shell,   \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502                                              to copy it or        \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502                                              customize the        \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502                                              installation.        \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;                                 &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;    &lt;/b&gt;&lt;/font&gt;  Show this message    \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                                              and exit.            \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n</code></pre> <p>Tip</p> <p>Notice the <code>--lastname</code>, and notice that it takes a textual value.</p> <p>A CLI option with a value like <code>--lastname</code> (contrary to a CLI option without a value, a <code>bool</code> flag, like <code>--formal</code> or <code>--size</code>) takes as its value whatever is at the right side of the CLI option.</p> <pre><code>// Call it without a --lastname\n$ python main.py Camila\n\nHello Camila\n\n// Pass the --lastname\n$ python main.py Camila --lastname Guti\u00e9rrez\n\nHello Camila Guti\u00e9rrez\n</code></pre> <p>Tip</p> <p>Notice that \"<code>Guti\u00e9rrez</code>\" is at the right side of <code>--lastname</code>. A CLI option with a value takes as its value whatever is at the right side.</p> <p>And as <code>--lastname</code> is now a CLI option that doesn't depend on the order, you can pass it before the name:</p> <pre><code>$ python main.py --lastname Guti\u00e9rrez Camila\n\n// and it will still work normally\nHello Camila Guti\u00e9rrez\n</code></pre>"},{"location":"overview/how-it-works/#document-your-cli-app","title":"Document your CLI app","text":"<p>If you add a docstring to your function it will be used in the help text:</p> <pre><code>{!../docs_src/first_steps/tutorial006.py!}\n</code></pre> <p>Now see it with the <code>--help</code> option:</p> <pre><code>$ python main.py --help\n\n&lt;b&gt; &lt;/b&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;Usage: &lt;/b&gt;&lt;/font&gt;&lt;b&gt;main.py [OPTIONS] NAME                                       &lt;/b&gt;\n&lt;b&gt;                                                                     &lt;/b&gt;\n Say hi to NAME, optionally with a &lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--lastname&lt;/b&gt;&lt;/font&gt;.\n If &lt;font color=\"#6B9F98\"&gt;&lt;b&gt;--formal&lt;/b&gt;&lt;/font&gt;&lt;font color=\"#A5A5A1\"&gt; is used, say hi very formally.                          &lt;/font&gt;\n\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#F92672\"&gt;*&lt;/font&gt;    name      &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;TEXT&lt;/b&gt;&lt;/font&gt;  [default: None] &lt;font color=\"#A6194C\"&gt;[required]&lt;/font&gt;                   \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--lastname&lt;/b&gt;&lt;/font&gt;                             &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;TEXT&lt;/b&gt;&lt;/font&gt;                       \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--formal&lt;/b&gt;&lt;/font&gt;                &lt;font color=\"#AE81FF\"&gt;&lt;b&gt;--no-formal&lt;/b&gt;&lt;/font&gt;    &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;    &lt;/b&gt;&lt;/font&gt;  [default: no-formal] \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--install-completion&lt;/b&gt;&lt;/font&gt;                   &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;    &lt;/b&gt;&lt;/font&gt;  Install completion   \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                                              for the current      \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502                                              shell.               \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--show-completion&lt;/b&gt;&lt;/font&gt;                      &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;    &lt;/b&gt;&lt;/font&gt;  Show completion for  \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                                              the current shell,   \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502                                              to copy it or        \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502                                              customize the        \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502                                              installation.        \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;                                 &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;    &lt;/b&gt;&lt;/font&gt;  Show this message    \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                                              and exit.            \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n</code></pre> <p>Tip</p> <p>There is another place to document the specific CLI options and CLI arguments that will show up next to them in the help text as with <code>--install-completion</code> or <code>--help</code>, you will learn that later in the tutorial.</p>"},{"location":"overview/how-it-works/#arguments-options-parameters-optional-required","title":"Arguments, options, parameters, optional, required","text":"<p>Be aware that these terms refer to multiple things depending on the context, and sadly, those \"contexts\" mix frequently, so it's easy to get confused.</p>"},{"location":"overview/how-it-works/#in-python","title":"In Python","text":"<p>In Python, the names of the variables in a function, like <code>name</code> and <code>lastname</code>:</p> <pre><code>def main(name: str, lastname: str = \"\"):\n    pass\n</code></pre> <p>are called \"Python function parameters\" or \"Python function arguments\".</p> <p>Technical Details</p> <p>There's actually a very small distinction in Python between \"parameter\" and \"argument\".</p> <p>It's quite technical... and somewhat pedantic.</p> <p>Parameter refers to the variable name in a function declaration. Like:</p> <pre><code>def bring_person(name: str, lastname: str = \"\"):\n    pass\n</code></pre> <p>Argument refers to the value passed when calling a function. Like:</p> <pre><code>person = bring_person(\"Camila\", lastname=\"Guti\u00e9rrez\")\n</code></pre> <p>...but you will probably see them used interchangeably in most of the places (including here).</p>"},{"location":"overview/how-it-works/#python-default-values","title":"Python default values","text":"<p>In Python, in a function, a parameter with a default value like <code>lastname</code> in:</p> <pre><code>def main(name: str, lastname: str = \"\"):\n    pass\n</code></pre> <p>is considered an \"optional parameter\" (or \"optional argument\").</p> <p>The default value can be anything, like <code>\"\"</code> or <code>None</code>.</p> <p>And a parameter like <code>name</code>, that doesn't have a default value, is considered required.</p>"},{"location":"overview/how-it-works/#in-clis","title":"In CLIs","text":"<p>When talking about command line interface applications, the words \"argument\" and \"parameter\" are commonly used to refer to that data passed to a CLI app, those parameters.</p> <p>But those words don't imply anything about the data being required, needing to be passed in a certain order, nor having a flag like <code>--lastname</code>.</p> <p>The parameters that come with a name like <code>--lastname</code> (and optionally a value) are commonly optional, not required. So, when talking about CLIs it's common to call them optional arguments or optional parameters. Sometimes these optional parameters that start with <code>--</code> are also called a flag or a switch.</p> <p>In reality, the parameters that require an order can be made optional too. And the ones that come with a flag (like <code>--lastname</code>) can be required too.</p>"},{"location":"overview/how-it-works/#in-typer","title":"In Typer","text":"<p>To try and make it a bit easier, we'll normally use the words \"parameter\" or \"argument\" to refer to Python functions.</p> <p>We'll use CLI argument to refer to those CLI parameters that depend on the specific order. That are required by default.</p> <p>And we'll use CLI option to refer to those CLI parameters that depend on a name that starts with <code>--</code> (like <code>--lastname</code>). That are optional by default.</p> <p>We will use CLI parameter to refer to both, CLI arguments and CLI options.</p>"},{"location":"overview/how-it-works/#typer-cli","title":"Typer CLI","text":"<p>Now that you know the basics of Typer, you might want to install and use Typer CLI{.internal-link target=_blank}.</p> <p>Typer CLI is a tool to run your Typer scripts giving you \u2728 auto completion \u2728 in your terminal.</p> <p>As an alternative to running with Python:</p> <pre><code>$ python main.py\n\nHello World\n</code></pre> <p>You can run with Typer CLI:</p> <pre><code>$ typer main.py run\n\nHello World\n</code></pre> <p>...and it will give you auto completion in your terminal when you hit TAB for all your code.</p> <p>So you can use it to have auto completion for your own scripts as you continue with the tutorial.</p> <p>Tip</p> <p>Your CLI application built with Typer won't need Typer CLI{.internal-link target=_blank} to have auto completion once you create a Python package.</p> <p>But for short scripts and for learning, before creating a Python package, it might be useful.</p>"},{"location":"overview/next-steps/","title":"Next steps","text":"<p>There are some cases where you might want to terminate a command at some point, and stop all subsequent execution.</p> <p>It could be that your code determined that the program completed successfully, or it could be an operation aborted.</p>"},{"location":"overview/next-steps/#exit-a-cli-program","title":"<code>Exit</code> a CLI program","text":"<p>You can normally just let the code of your CLI program finish its execution, but in some scenarios, you might want to terminate at some point in the middle of it. And prevent any subsequent code to run.</p> <p>This doesn't have to mean that there's an error, just that nothing else needs to be executed.</p> <p>In that case, you can raise a <code>typer.Exit()</code> exception:</p> <pre><code>{!../docs_src/terminating/tutorial001.py!}\n</code></pre> <p>There are several things to see in this example.</p> <ul> <li>The CLI program is the function <code>main()</code>, not the others. This is the one that takes a CLI argument.</li> <li>The function <code>maybe_create_user()</code> can terminate the program by raising <code>typer.Exit()</code>.</li> <li>If the program is terminated by <code>maybe_create_user()</code> then <code>send_new_user_notification()</code> will never execute inside of <code>main()</code>.</li> </ul> <p>Check it:</p> <pre><code>$ python main.py Camila\n\nUser created: Camila\nNotification sent for new user: Camila\n\n// Try with an existing user\n$ python main.py rick\n\nThe user already exists\n\n// Notice that the notification code was never run, the second message is not printed\n</code></pre> <p>Tip</p> <p>Even though you are raising an exception, it doesn't necessarily mean there's an error.</p> <p>This is done with an exception because it works as an \"error\" and stops all execution.</p> <p>But then Typer (actually Click) catches it and just terminates the program normally.</p>"},{"location":"overview/next-steps/#exit-with-an-error","title":"Exit with an error","text":"<p><code>typer.Exit()</code> takes an optional <code>code</code> parameter. By default, <code>code</code> is <code>0</code>, meaning there was no error.</p> <p>You can pass a <code>code</code> with a number other than <code>0</code> to tell the terminal that there was an error in the execution of the program:</p> <pre><code>{!../docs_src/terminating/tutorial002.py!}\n</code></pre> <p>Check it:</p> <pre><code>$ python main.py Camila\n\nNew user created: Camila\n\n// Print the result code of the last program executed\n$ echo $?\n\n0\n\n// Now make it exit with an error\n$ python main.py root\n\nThe root user is reserved\n\n// Print the result code of the last program executed\n$ echo $?\n\n1\n\n// 1 means there was an error, 0 means no errors.\n</code></pre> <p>Tip</p> <p>The error code might be used by other programs (for example a Bash script) that execute your CLI program.</p>"},{"location":"overview/next-steps/#abort","title":"Abort","text":"<p>There's a special exception that you can use to \"abort\" a program.</p> <p>It works more or less the same as <code>typer.Exit()</code> but will print <code>\"Aborted!\"</code> to the screen and can be useful in certain cases later to make it explicit that the execution was aborted:</p> <pre><code>{!../docs_src/terminating/tutorial003.py!}\n</code></pre> <p>Check it:</p> <pre><code>$ python main.py Camila\n\nNew user created: Camila\n\n// Now make it exit with an error\n$ python main.py root\n\nThe root user is reserved\nAborted!\n</code></pre>"},{"location":"overview/scenarios/","title":"Scenarios","text":"<p>Warning</p> <p>This is a more advanced topic, if you are starting with Typer, feel free to skip it.</p> <p>It will be mostly useful for people that already work with Click and have questions around it.</p> <p>Typer is powered by Click. It does all the work underneath.</p> <p>Here is some more information related to using both together.</p>"},{"location":"overview/scenarios/#a-single-app-with-both-click-and-typer","title":"A single app with both Click and Typer","text":"<p>If you already have a Click application and want to migrate to Typer, or to add some Typer components, you can get a Click <code>Command</code> from your Typer application and then use Click directly.</p>"},{"location":"overview/scenarios/#how-click-works","title":"How Click works","text":"<p>Before knowing how to combine Click and Typer, let's first check a little about how Click works.</p>"},{"location":"overview/scenarios/#click-command","title":"Click <code>Command</code>","text":"<p>Any Click application has an object of class <code>Command</code>. That's, more or less, the most basic Click object.</p> <p>A <code>Command</code> can have its own CLI arguments and CLI options, and it has a function that it calls.</p> <p>For example, in this Click app:</p> <pre><code>{!../docs_src/using_click/tutorial001.py!}\n</code></pre> <p>The original <code>hello</code> variable is converted by Click from a function to a <code>Command</code> object. And the original <code>hello</code> function is used by that <code>Command</code> internally, but it is no longer named <code>hello</code> (as <code>hello</code> is now a Click <code>Command</code>).</p>"},{"location":"overview/scenarios/#click-group","title":"Click <code>Group</code>","text":"<p>Then Click also has a <code>Group</code> class, it inherits from <code>Command</code>. So, a <code>Group</code> object is also a <code>Command</code>.</p> <p>A <code>Group</code> can also have its own CLI arguments and CLI options.</p> <p>A <code>Group</code> can have subcommands of class <code>Command</code> or sub groups of class <code>Group</code> as well.</p> <p>And a <code>Group</code> can also have a function that it calls, right before calling the function for any specific subcommand.</p> <p>For example:</p> <pre><code>{!../docs_src/using_click/tutorial002.py!}\n</code></pre> <p>The <code>cli</code> variable is converted by Click from a function to a <code>Group</code> object. And the original <code>cli</code> function is used by that <code>Group</code> internally.</p> <p>Tip</p> <p>The original <code>cli</code> function would be the equivalent of a Typer Callback{.internal-link target=_blank}.</p> <p>Then the <code>cli</code> variable, that now is a <code>Group</code> object, is used to add sub-commands.</p>"},{"location":"overview/scenarios/#how-typer-works","title":"How Typer works","text":"<p>Typer doesn't modify the functions. You create an explicit variable of class <code>typer.Typer</code> and use it to register those functions.</p> <p>And then, when you call the app, Typer goes and creates a Click <code>Command</code> (or <code>Group</code>), and then calls it.</p> <p>If your app only has one command, then when you call it, Typer creates a single Click <code>Command</code> object and calls it.</p> <p>But Typer creates a Click <code>Group</code> object if your app has any of:</p> <ul> <li>More than one command.</li> <li>A callback.</li> <li>Sub-Typer apps (sub commands).</li> </ul> <p>Tip</p> <p>If you want to learn more about this check the section One or Multiple Commands{.internal-link target=_blank}.</p>"},{"location":"overview/scenarios/#combine-click-and-typer","title":"Combine Click and Typer","text":"<p>Typer uses an internal function <code>typer.main.get_command()</code> to generate a Click <code>Command</code> (or <code>Group</code>) from a <code>typer.Typer</code> object.</p> <p>You can use it directly, and use the Click object with other Click applications.</p>"},{"location":"overview/scenarios/#including-a-click-app-in-a-typer-app","title":"Including a Click app in a Typer app","text":"<p>For example, you could have a Typer app, generate a Click <code>Group</code> from it, and then include other Click apps in it:</p> <pre><code>{!../docs_src/using_click/tutorial003.py!}\n</code></pre> <p>Notice that we add a callback that does nothing (only document the CLI program), to make sure Typer creates a Click <code>Group</code>. That way we can add sub-commands to that Click <code>Group</code>.</p> <p>Then we generate a Click object from our <code>typer.Typer</code> app (<code>typer_click_object</code>), and then we can include another Click object (<code>hello</code>) in this Click <code>Group</code>.</p> <p>And that way, our Typer app will have a subcommand <code>top</code> built with Typer, and a subcommand <code>hello</code> built with Click.</p> <p>Check it:</p> <pre><code>$ python main.py\n\n// Notice we have both subcommands, top and hello\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nError: Missing command.\n\n// Call the Typer part\n$ python main.py top\n\nThe Typer app is at the top level\n\n// Call the Click part\n$ python main.py hello --name Camila\n\nHello Camila!\n</code></pre>"},{"location":"overview/scenarios/#including-a-typer-app-in-a-click-app","title":"Including a Typer app in a Click app","text":"<p>The same way, you can do the contrary and include a Typer sub app in a bigger Click app:</p> <pre><code>{!../docs_src/using_click/tutorial004.py!}\n</code></pre> <p>Notice that we don't have to add a callback or more commands, we can just create a Typer app that generates a single Click <code>Command</code>, as we don't need to include anything under the Typer app.</p> <p>Then we generate a Click object from our <code>typer.Typer</code> app (<code>typer_click_object</code>), and then we use the Click <code>cli</code> to include our Click object from our Typer app.</p> <p>In this case, the original Click app includes the Typer app.</p> <p>And then we call the original Click app, not the Typer app.</p> <p>Check it:</p> <pre><code>$ python main.py\n\n// We get our Typer app down there in the sub command\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  dropdb\n  initdb\n  sub     A single-command Typer sub app\n\n\n// Use the Click part\n$ python main.py initdb\n\nInitialized the database\n\n// And use the Typer part\n$ python main.py sub\n\nTyper is now below Click, the Click app is the top level\n</code></pre>"},{"location":"overview/scenarios/#about-click-decorators","title":"About Click decorators","text":"<p>Typer apps don't work with Click decorators directly.</p> <p>This is because Typer doesn't modify functions to add metadata or to convert them to another object like Click does.</p> <p>So, things like <code>@click.pass_context</code> won't work.</p> <p>Most of the functionality provided by decorators in Click has an alternative way of doing it in Typer.</p> <p>For example, to access the context, you can just declare a function parameter of type <code>typer.Context</code>.</p> <p>Tip</p> <p>You can read more about using the context in the docs: Commands: Using the Context{.internal-link target=_blank}</p> <p>But if you need to use something based on Click decorators, you can always generate a Click object using the methods described above, and use it as you would normally use Click.</p>"},{"location":"overview/web-app/","title":"Web-app","text":"<p>Warning</p> <p>This is a more advanced topic, if you are starting with Typer, feel free to skip it.</p> <p>It will be mostly useful for people that already work with Click and have questions around it.</p> <p>Typer is powered by Click. It does all the work underneath.</p> <p>Here is some more information related to using both together.</p>"},{"location":"overview/web-app/#a-single-app-with-both-click-and-typer","title":"A single app with both Click and Typer","text":"<p>If you already have a Click application and want to migrate to Typer, or to add some Typer components, you can get a Click <code>Command</code> from your Typer application and then use Click directly.</p>"},{"location":"overview/web-app/#how-click-works","title":"How Click works","text":"<p>Before knowing how to combine Click and Typer, let's first check a little about how Click works.</p>"},{"location":"overview/web-app/#click-command","title":"Click <code>Command</code>","text":"<p>Any Click application has an object of class <code>Command</code>. That's, more or less, the most basic Click object.</p> <p>A <code>Command</code> can have its own CLI arguments and CLI options, and it has a function that it calls.</p> <p>For example, in this Click app:</p> <pre><code>{!../docs_src/using_click/tutorial001.py!}\n</code></pre> <p>The original <code>hello</code> variable is converted by Click from a function to a <code>Command</code> object. And the original <code>hello</code> function is used by that <code>Command</code> internally, but it is no longer named <code>hello</code> (as <code>hello</code> is now a Click <code>Command</code>).</p>"},{"location":"overview/web-app/#click-group","title":"Click <code>Group</code>","text":"<p>Then Click also has a <code>Group</code> class, it inherits from <code>Command</code>. So, a <code>Group</code> object is also a <code>Command</code>.</p> <p>A <code>Group</code> can also have its own CLI arguments and CLI options.</p> <p>A <code>Group</code> can have subcommands of class <code>Command</code> or sub groups of class <code>Group</code> as well.</p> <p>And a <code>Group</code> can also have a function that it calls, right before calling the function for any specific subcommand.</p> <p>For example:</p> <pre><code>{!../docs_src/using_click/tutorial002.py!}\n</code></pre> <p>The <code>cli</code> variable is converted by Click from a function to a <code>Group</code> object. And the original <code>cli</code> function is used by that <code>Group</code> internally.</p> <p>Tip</p> <p>The original <code>cli</code> function would be the equivalent of a Typer Callback{.internal-link target=_blank}.</p> <p>Then the <code>cli</code> variable, that now is a <code>Group</code> object, is used to add sub-commands.</p>"},{"location":"overview/web-app/#how-typer-works","title":"How Typer works","text":"<p>Typer doesn't modify the functions. You create an explicit variable of class <code>typer.Typer</code> and use it to register those functions.</p> <p>And then, when you call the app, Typer goes and creates a Click <code>Command</code> (or <code>Group</code>), and then calls it.</p> <p>If your app only has one command, then when you call it, Typer creates a single Click <code>Command</code> object and calls it.</p> <p>But Typer creates a Click <code>Group</code> object if your app has any of:</p> <ul> <li>More than one command.</li> <li>A callback.</li> <li>Sub-Typer apps (sub commands).</li> </ul> <p>Tip</p> <p>If you want to learn more about this check the section One or Multiple Commands{.internal-link target=_blank}.</p>"},{"location":"overview/web-app/#combine-click-and-typer","title":"Combine Click and Typer","text":"<p>Typer uses an internal function <code>typer.main.get_command()</code> to generate a Click <code>Command</code> (or <code>Group</code>) from a <code>typer.Typer</code> object.</p> <p>You can use it directly, and use the Click object with other Click applications.</p>"},{"location":"overview/web-app/#including-a-click-app-in-a-typer-app","title":"Including a Click app in a Typer app","text":"<p>For example, you could have a Typer app, generate a Click <code>Group</code> from it, and then include other Click apps in it:</p> <pre><code>{!../docs_src/using_click/tutorial003.py!}\n</code></pre> <p>Notice that we add a callback that does nothing (only document the CLI program), to make sure Typer creates a Click <code>Group</code>. That way we can add sub-commands to that Click <code>Group</code>.</p> <p>Then we generate a Click object from our <code>typer.Typer</code> app (<code>typer_click_object</code>), and then we can include another Click object (<code>hello</code>) in this Click <code>Group</code>.</p> <p>And that way, our Typer app will have a subcommand <code>top</code> built with Typer, and a subcommand <code>hello</code> built with Click.</p> <p>Check it:</p> <pre><code>$ python main.py\n\n// Notice we have both subcommands, top and hello\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nError: Missing command.\n\n// Call the Typer part\n$ python main.py top\n\nThe Typer app is at the top level\n\n// Call the Click part\n$ python main.py hello --name Camila\n\nHello Camila!\n</code></pre>"},{"location":"overview/web-app/#including-a-typer-app-in-a-click-app","title":"Including a Typer app in a Click app","text":"<p>The same way, you can do the contrary and include a Typer sub app in a bigger Click app:</p> <pre><code>{!../docs_src/using_click/tutorial004.py!}\n</code></pre> <p>Notice that we don't have to add a callback or more commands, we can just create a Typer app that generates a single Click <code>Command</code>, as we don't need to include anything under the Typer app.</p> <p>Then we generate a Click object from our <code>typer.Typer</code> app (<code>typer_click_object</code>), and then we use the Click <code>cli</code> to include our Click object from our Typer app.</p> <p>In this case, the original Click app includes the Typer app.</p> <p>And then we call the original Click app, not the Typer app.</p> <p>Check it:</p> <pre><code>$ python main.py\n\n// We get our Typer app down there in the sub command\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  dropdb\n  initdb\n  sub     A single-command Typer sub app\n\n\n// Use the Click part\n$ python main.py initdb\n\nInitialized the database\n\n// And use the Typer part\n$ python main.py sub\n\nTyper is now below Click, the Click app is the top level\n</code></pre>"},{"location":"overview/web-app/#about-click-decorators","title":"About Click decorators","text":"<p>Typer apps don't work with Click decorators directly.</p> <p>This is because Typer doesn't modify functions to add metadata or to convert them to another object like Click does.</p> <p>So, things like <code>@click.pass_context</code> won't work.</p> <p>Most of the functionality provided by decorators in Click has an alternative way of doing it in Typer.</p> <p>For example, to access the context, you can just declare a function parameter of type <code>typer.Context</code>.</p> <p>Tip</p> <p>You can read more about using the context in the docs: Commands: Using the Context{.internal-link target=_blank}</p> <p>But if you need to use something based on Click decorators, you can always generate a Click object using the methods described above, and use it as you would normally use Click.</p>"},{"location":"reference/","title":"Changelog","text":""},{"location":"reference/#visionai-changelog","title":"VisionAI Changelog","text":""},{"location":"reference/#017-january-22-2023","title":"0.1.7 January 22, 2023","text":"<ul> <li>Implemented camera add/delete functionality</li> </ul>"},{"location":"reference/#016-january-20-2023","title":"0.1.6 January 20, 2023","text":"<ul> <li>Implemented initial set of commands in different files (dummy implementation)</li> <li>Testing commands individually or through the main application</li> </ul>"},{"location":"reference/#013-january-16-2023","title":"0.1.3 January 16, 2023","text":"<ul> <li>Basic overview and usage documentation is updated.</li> <li>Started using a termy JS script to show terminal animations nicely</li> </ul>"},{"location":"reference/#012-january-14-20123","title":"0.1.2 January 14, 20123","text":"<ul> <li>Made MkDocs documents based on Typer format</li> <li>Registered CNAME to point to https://docs.visionify.ai</li> </ul>"},{"location":"reference/#011-january-11-2023","title":"0.1.1 January 11, 2023","text":"<ul> <li>Updated Azure DevOps CI/CD to automatically publish package on each merge</li> <li>Initial set of commands for visionai application</li> <li>Made <code>visionai</code> as a callable CLI application through poetry</li> </ul>"},{"location":"reference/#010-january-10-2023","title":"0.1.0 January 10, 2023","text":"<ul> <li>Initial release: <code>pip install visionai</code></li> <li>Pushed package to <code>PyPI</code> repository</li> </ul>"},{"location":"scenarios/","title":"VisionAI","text":"<p>Documentation for VisionAI toolkit.</p>"},{"location":"scenarios/#overview","title":"Overview","text":"<p>VisionAI provides a set of command line utilities for you to manage different Vision AI scenarios that have been pre-developed and pre-tested. VisionAI focuses on workplace health and safety models - and majority of the models you see here have been developed with that in mind.</p> <p>These are production-ready model trained from open-source and academic datasets. We are continuously working on new scenarios - and our current scenario repo consists of over 60 scenarios that are listed here. They are developed with the intent of being easy-to-use for business. The framework also supports a whole bunch of custom scenarios.</p>"},{"location":"scenarios/#install-visionai","title":"Install VisionAI","text":"<p>Install VisionAI application through <code>PyPI</code>. There are other options available for install - including a Docker container option. These are detailed in installation section.</p> <pre><code>$ pip install visionai\n---&gt; 100%\n\nSuccessfully installed visionai\n\n\u2728 You are all set to use visionai toolkit \u2728\n</code></pre>"},{"location":"scenarios/#deploy-to-azure","title":"Deploy to Azure","text":"<p>Deploy a fully configured and tested solution directly from Azure Marketplace. VisionAI runs computer vision models, most of which run orders of magnitude faster if executed on a GPU machine. Our Azure Marketplace offer VisionAI Community Edition is available through Azure Marketplace here (TODO). The community edition deploys a fully configured Virtual Machine with the recommended hardware and software options. Get more details here.</p> <p></p> <ul> <li>TODO: Point to ARM template that needs to be deployed (using these instructions and here is an example JSON file).</li> </ul>"},{"location":"scenarios/#list-available-scenarios","title":"List available Scenarios","text":"<p>VisionAI is organized in terms of scenarios. Consider each scenario as being a business use-case, that is solved by a combination of Machine Learning models and an inference algorithm. For example Warn me when max occupancy of this area exceeds 80 people is a business scenario, where as the People detection is an ML model.</p> <p>VisionAI supports 60 scenarios currently and more are being added continuously. Our current focus is on Workplace Safety scenarios. Please contact us if a scenario you need is not present in our repo and we will look into it.</p> <pre><code>$ visionai scenarios list\n\n------------------------------------------------\nPrivacy Suite\nblur-faces\nblur-text\n\nFire safety\nearly-smoke-and-fire-detection\nsmoking-and-vaping-detection\n\nPersonnel safety\nppe-detection\npfas-system-detection\nrailings-detection\n\nSuspicious activity\nshipping-activity-detection\nagressive-behaivior\n\n\nCompliance Policies\nmax-occupancy\n\nEquipment\nrust-and-corrosion-detection\n\nIR Camera\ntemperature-monitoring\n------------------------------------------------\n\n\u2728 More scenarios are added regularly \u2728\n</code></pre>"},{"location":"scenarios/#get-details-for-a-scenario","title":"Get details for a Scenario","text":"<p>You can get details about a scenario using <code>visionai scenario details</code> command. Specify the scenario you want additional details for. The details of a scenario include the dataset size, model accuracy metrics,</p> <pre><code>$ visionai scenario --name early-smoke-and-fire-detection details\n\n------------------------------------------------\nCategory: Fire safety\nScenario: early-smoke-and-fire-detection\nThis scenario has been trained on open-source datasets consisting of 126,293 images. The datasets images are primarily outdoors (70%), but do contain a good number of indoor images (30%). There is a ~50-50% mix of day vs night images. You can find more details about this scenario at visionify.ai/early-smoke-and-fire-detection.\n\n\nModel: smoke-and-fire-detection-1.0.1.pt\nModel size: 127MB\nModel type: Object Detection\nFramework: PyTorch\n\nModel performance:\nDataset size: 126,293 images\nAccuracy: 94.1%\nRecall: 93%\nF1-Score: 93.5%\n\nEvents:\nsmoke-detected  | Immediate\nfire-detected   | Immediate\n\nEvent examples:\n{\n    \"scenario\": \"smoke-and-fire-detection\",\n    \"event_name\": \"smoke-detected\",\n    \"event_details\": {\n        \"camera\": \"camera-01\",\n        \"date\": \"2023-01-04 11:05:02\",\n        \"confidence\": 0.92\n    }\n}\n------------------------------------------------\n</code></pre>"},{"location":"scenarios/#run-a-scenario","title":"Run a Scenario","text":"<p>Use <code>visionai run</code> command to run a scenario. In its simplest sense, you can run a single scenario on your web-cam. In a more complex use-case, you can specify a pipeline of scenarios, configure notification logic for each scenario, timings for each scenario etc.</p> <pre><code>$ visionai run --scenario early-smoke-and-fire-detection --camera OFFICE-01\n\nStarting early-smoke-and-fire-detection\n...\n</code></pre>"},{"location":"scenarios/#get-help-on-commands","title":"Get help on commands","text":"<p>You can get more help on any command by adding --help at the end of the command. For example, if you want to get details about pipeline commands, you can run the following commands.</p> <pre><code>$ visionai pipeline --help\n\n Usage: visionai pipeline [OPTIONS] COMMAND [ARGS]...\n\n Manage pipelines\n Pipeline is a sequence of preprocess routines and\n scenarios to be run on a given set of cameras. Each\n pipeline can be configured to run specific scenarios -\n each scenario with their own customizations for event\n notifications. This module provides robust methods for\n managing pipelines, showing their details, adding/remove\n cameras from pipelines and running a pipeline.\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 add-camera      Add a camera to a pipeline               \u2502\n\u2502 add-preprocess  Add a preprocess routine to a pipeline   \u2502\n\u2502 add-scenario    Add a scenario to a pipeline             \u2502\n\u2502 create          Create a named pipeline                  \u2502\n\u2502 remove-camera   Remove a camera from a pipeline          \u2502\n\u2502 reset           Reset the pipeline to original state.    \u2502\n\u2502 run             Run a pipeline of scenarios on given     \u2502\n\u2502                 cameras                                  \u2502\n\u2502 show            Show details of a pipeline               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n$ visionai pipeline add-scenario --help\n\n Usage: visionai pipeline add-scenario [OPTIONS]\n\n Add a scenario to a pipeline\n The order of the scenarios does not matter. All added\n scenarios are run in different threads. All scenarios are\n run after pre-processing stage is done.\n ``` Ex: visionai pipeline --name test_pipe add-scenario\n --name smoke-and-fire visionai pipeline --name test_pipe\n add-scenario --name ppe-detection visionai pipeline --name\n test_pipe run ```\n @arg pipeline - specify a named pipeline @arg scenario -\n specify name of the scenario to run\n @return None\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *  --pipeline        TEXT  pipeline name [default: None] \u2502\n\u2502                            [required]                    \u2502\n\u2502 *  --scenario        TEXT  scenario to add               \u2502\n\u2502                            [default: None]               \u2502\n\u2502                            [required]                    \u2502\n\u2502    --help                  Show this message and exit.   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"scenarios/#next-steps","title":"Next steps","text":"<p>Congratulations! You have successfully run the first scenario. Now go through Tutorials to learn about how to run multiple scnearios, how to configure each scenario for the events you need, how to set up the dependencies etc.</p> <p>Or you can also go through our scenarios page to explore the different scenarios available and their model details. If you have a need for a scenario to be implemented, do not hesitate to submit a request.</p>"}]}